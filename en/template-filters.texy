Latte filter
************

.[perex]
Latte filter works with blocks and supports context-sensitive escaping.


Registration
==========

In components it is automatically registered. Elsewhere, it is necessary to register it just like any other filter.

/--php
$template->registerFilter(new LatteFilter);
\--


Basic Macros
==============

| in Latte | in PHP
|------------------------------------------------------------------------------------------------
| `{$variable}`                            | Prints contextually variable escaping.
| `{!$variable}`                           | Output variable without escaping.
| `{*text komentáře*}`                     | comments; will be removed
| `{plink ...}`                            | Print escaped contextually link.
| `{link ...}`                             | Link to the component
| `{if ?} ... {elseif ?} ... {/if}`        | `<?php if (?): ?> ... <?php elseif (?): ?> ... <?php endif ?>`
| `{foreach ?} ... {/foreach}`             | `<?php foreach (?): ?> ... <?php endforeach ?>`
| `{for ?} ... {/for}`                     | `<?php for (?): ?> ... <?php endfor ?>`
| `{while ?} ... {/while}`                 | `<?php while (?): ?> ... <?php endwhile ?>`
| `{include dir/file.phtml}`               | Inserts sub-template
| `{var foo => value}`                     | Declare a variable in the template
| `{default foo => value}`                 | Declare a variable's default value
| `{control loginForm}`                    | Draws a component with that name
| `{dump $variable}`                       | Dumps variable to the `DebugBaru`



Listing of variables
----------------

All variables are offered escaped.

/--html
Name: {$name}<br>
Surname: {$surname}<br>
Age: {$age}
\--

If for some reason we need to turn off escaping, so we put an exclamation mark against the dollar.


/--html
<h1>{$title}</h1> {* Escaped title *}
{!$content}       {* Nonescaped content *}
\--


Escaping local adaptation according to the type of content
---------------------------------------------------
A very important feature is the adaptation of escaping under the local content type (the so-called context-sensitive escaping).
Inside or JavaScript inside CSS escapuje differently than in HTML.
This makes it possible to fully use the native PHP variables within JavaScript code.

Example:
/--php
$template->pole = array(1, 2, 3);
$template->name = "Jim Beam";
\--

/--code html
<script type="text/javascript">
    var pole = {$pole};
    var name = {$name}; // but beware - you must not use extra quotes
    var anotherName = "{$name}";  // ERROR generate anotherName = ""Jim Beam"";
</script>
\--

If you insert a variable in the template in HTML, CSS or JavaScript, always correctly escapuje (`$ id` is an identifier that contains any characters):

/--code html
<style type="text/css">
    #{$id} { background: blue; }
</style>

<script type="text/javascript">
    document.getElementById({$id}).style.backgroundColor = 'red';
</script>

<p id="{$id}">Hello!</p>
\--



Links `{plink ...}` .[#toc-plink]
--------------------

Brand `{plink}`` is an abbreviation for `$presenter->link` and therefore serves to generate a reference to the presenter of the event with given parameters, respectively. on the signal. For the record path is used the same syntax as the [/generate link] in the presenter.

/--code html
{* Generate relative path to ProductsPresenter and event details *}
{plink Products:detail, id => $productId}

{* Pokud je v metodě `renderDetail` definován parametr `$id`, tak lze jeho jméno při tvorbě odkazu vynechat *}
{* If the method renderDetail defined parameter $id, so may his name be omitted to create a link *}
{plink Products:detail, $productId}

{* If the current presenter of just ProductsPresenter, so you can omit his name *}
{plink detail, $productId}
\--


Links `{link ...}` .[#toc-link]
-------------------
Works just like `{plink}` but generates links above current component (the abbreviation for `$control->link`).


Conditions `{if ?} ... {/if}` .[#toc-if]
---------------------------
For conditional rendering of certain parts of templates you can use conditions in the form of `{if ?} ... {elseif ?} ... {else} ... {/if}`.


/--html
{if $isLoggedIn}<a href="...">Log out</a>{else}<a href="...">Login</a>{/if}
\--

We can also use special construction `{ifset $var} ... {elseifset $var2} ... {/if}`, which replaces the entry `{if isset($var)} ... {elseif isset($var2)} ... {/if}`.

Cycle can be used inside macros `{continueIf ?}` a `{breakIf ?}`.


Foreach cycle .[#toc-foreach]
--------------

Foreach cycle acts as a normal `foreach` in PHP with enhancements.

Inside the loop is initialized with the variable `$iterator` that allows you to identify some otherwise hard-identifiable information about a current cycle.

Methods `$iterator` variable:
- `isFirst()` - is the first time through the cycle?
- `isLast()` - is the last pass?
- `getCounter()` - counter of passage calculated from one
- `isOdd()` - an odd passage?
- `isEven()` - an even passage?

Example:

/--code html
{foreach $rows as $row}
        {if $iterator->isFirst()}
        <table>
        {/if}
        <tr id="row-{$iterator->getCounter()}">
                <td>{$row->name}</td>
                <td>{$row->email}</td>
        </tr>
        {if $iterator->isLast()}
        </table>
        {/if}
{/foreach}
\--


Inserting Files
----------------

Including files implementing macro `{include file.phtml}`. The file that has a global variable current template (`$template->getParams()`) and the parameters to call him when we pass.

/--html
{include userProfile.phtml, id => 12, name => 'John Smith'}
\--

.[note]
Macro `{include}`, in addition to input files used for [insert blocks | Latte filter/Inheritance#Insert].

Declaring Variables
--------------------
Sometimes it may be appropriate to declare a variable to the template. For these purposes, use the macro `{var}` using the following syntax:

/--html
{var name => 'John Smith'}
{var age => 27}

{* multiple declaration *}
{var name => 'John Smith', age => 27}
\--


In the event that we declare promměnou only if it is not declared yet, so use the `{default}` macro.

/--html
{default page => 1}
\--

Rendering Component `{control ...}` .[#toc-control]
--------------------

Macro `{control}` is easy for rendering components. For a better understanding of it is good to know how this translates into the PHP tag.

/--html
{control cartControl}		for the whole basket of the page
{control cartControl:small}	for a small preview Cart
\--

be translated as:

/--php
$control->getWidget("cartControl")->render();
$control->getWidget("cartControl")->renderSmall();
\--

Method `getWidget()` returns component `cartControl` and above this component calls the method `render()`, respectively. `renderSmall()` if it is another way of rendering appears in the brand after the colon.


You can also use the Call parameters to be forwarded to the rendering methods, such as:

/--html
{control cartControl:small, $maxItems}
\--

be translated as:

/--php
$control->getWidget("cartControl")->renderSmall($maxItems);
\--

Dump variables `{dump}` .[#toc-dump]
-----------------------------

/--html
{dump $name} {* Prints the variable $name *}

{dump}       {* Lists all currently defined variables}
\--


Alternative entry through n:attribute
====================================
Paired macros can also write an alternative syntax using the so-called n:attributes.

<table>
<tr>
  <th>Using n:attributes</td>
  <th>Standard syntax</td>
</tr>

<tr>
<td valign=="top">
/--html
<div class="login" n:if="$cond">
        <p>User {$name}</p>
        ...
</div>
\--
</td>

<td valign=="top">
/--html
{if $cond}
<div class="login">
        <p>User {$name}</p>
        ...
</div>
{/if}
\--
</td>
</tr>


<tr>
<td valign=="top">
/--html
<ul>
	<li n:foreach="$items as $item">{$item}</li>
</ul>
\--
</td>

<td valign=="top">
/--html
<ul>
{foreach $items as $item}
	<li>{$item}</li>
{/foreach}
</ul>
\--
</td>
</tr>


<tr>
<td valign=="top">
/--html
<p><strong n:tag-if="$strong">...</strong></p>
\--
</td>

<td valign=="top">
/--html
<p>{if $strong}<strong>{/if}...{if $strong}</strong>{/if}</p>
\--
</td>
</tr>

<tr>
<td valign=="top">
/--html
<ul n:inner-foreach="$items as $item">
        <li>A {$item}</li>
        <li>B {$item}</li>
</ul>
\--
</td>

<td valign=="top">
/--html
<ul>
{foreach $items as $item}
        <li>A {$item}</li>
        <li>B {$item}</li>
{/foreach}
</ul>
\--
</td>
</tr>


</table>


Support helper
===============

Latte filter supports easy call [helper | Template#Helper] using the following syntax:

/--code html
<h1>{$heading|upper}</h1>
\--

It is possible to concatenate multiple helpers (or modifiers):

/--code html
<h1>{$heading|lower|capitalize}</h1>
\--

Performed in sequence from left to right.

Helper function of other parameters are entered under the name Helper separated by colons.

/--code html
<a href="...">{$linkText|truncate:20}</a>
\--


Where next?
=========

.[navig]
1. [/sablony/Latte filter/Pokročilá makra]
2. [/sablony/Latte filter/Dědičnost]
3. [/sablony/Latte filter/Snippety]
4. [/sablony/Latte filter/Vlastní makra]
