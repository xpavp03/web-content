Nette\Application\Route
*************************
Úkolem routy je nejen cestu naparsovat, ale i vygenerovat a vybrat správný presenter. .[perex]

Kolik regulárů používáš v .htaccess, s tolika routami si vystačíš v Nette! .[tip]

V jiných systémech má routování obrovských význam, naopak v *Nette* se jím netřeba zabývat. To je věc, se může řešit až když je aplikace hotová.

Výhoda *Nette* oproti některým jiným MVC frameworkům je v tom, že nemusí pojmenovávat routy. Routy mají minimální závislosti mezi vrstavama (např. není vztah mezi pořadím parametrů v routě a argumenty metody presenteru).

Pár tipů k tvorbám rout:
- 1.parametr je maska cesty, která funguje jako regulární výraz. Další jsou výchozí a povinné hodnoty
- routy tvoříme od těch konkrétním k těm obecným
- nastavení routeru nemá cenu kešovat, funguje rychleji, než když se načítá z keše
- rychlost routování je skoro stejně rychlá jako rychlost `RewriteRules` z `.htaccesu`
- je možno napsat vastní router, stačí implementovat danná rozhraní

Pokud je routa nainicializována jako ta níže (uvedení výchozích hodnot presenteru a view), nemusí se v metodách pro tvorbu odkazů uvádět celá maska routy. View není potřeba uvádět vůbec – výchozí hodnota je `default` zcela automaticky.

/--php
$router = $application->getRouter();

$router[] = new Route('index.php', array(
	'presenter' => 'Article',
	'view' => 'show',
), Route::ONE_WAY);

$router[] = new Route('<presenter>/<view>/<id>', array(
	'presenter' => 'Article',
	'view' => 'show',
	'id' => NULL,
));

$presenter->link('Article:'); // ekvivalentní s Article:show
\--

Routa s `index.php` určuje, že při požadavku na stránku `index.php` se otevře presenter `Article` a view `show`. Lze ji použít pro zpětnou kompatibilitu – pokud na web již existují odkazy ve tvaru `http://example.com/index.php`, je vhodné podchytit.

U zpětně-kompatibilních rout se nastavuje příznak `Route::ONE_WAY` (jednosměrka), který zajistí, že routa může požadavek přijmout (stránka `index.php` funguje), ale **nevytváří URL**. Při přístupu na jednosměrné routy se request automaticky přesměruje na kompatibilní routu, pokud existuje taková. Tedy při generování URL pro presenter `Article` a view `show` se nevygeneruje `index.php`, ale použije se další routa.

V případě nenalezení routy se vyhodí výjimka. .[note]

Unitř aplikace se odkazuje tak, jako když jsou volány metody v OOP: `Presenter::view($arg1, $arg2)`. Konrétně třeba `Product:detail($id)`. Voláme metodu `detail` třídy `Product` a předáme jí parametr `$id`.

- Validační výrazy jsou klasické regulární výrazy. Vlastně se dá říct, že pokud žádný validátor neuvedete, tak se použije `[^/]+`.
- `new Route('/storage/<path .*?>', ...)` maskou `.*?` se povolí všechny znaky včetně lomítek. To se hodí například když `path` má být cesta filesystemu

Odkaz na jiný presenter
-----------------------
`$link->(destination [,arg [,arg ...]])` kde `destination` je:
- `'anotherView'` (odkaz na aktuální presenter a `anotherView`)
- `'AnotherPresenter:anotherView'` (odkaz na `AnotherPresenter` a `anotherView`)
- `'AnotherPresenter:'` (ozkaz na `AnotherPresenter` a výchozí view `'default'`)
- `'AnotherModule:Presenter:view'` (odkaz do jiného modulu)

Tvorba rout
------------
Ukázka jednoduché routy je uvedene v bloku kódu výše. Nyní si ukážeme, jak zaroutovat do naší aplikace nějaký existující modul.

Dejme tomu, že do website programované v *Nette* chci přidat fórum. Stačí, aby fórum disponovalo instalační funkcí `createRoutes()`:
/--php
class Forum
{
    function createRoutes($router, $prefix)
    {
        $router[] = new Route($prefix . 'index.php', array(
            'presenter' => 'Forum:Homepage',
            'view' => 'default',
        ));
        $router[] = new Route($prefix . 'admin.php', array(
            'presenter' => 'Forum:Admin',
            'view' => 'default',
        ));
        ...
    }
}
\--


„Zaroutování“ fóra do existující aplikace je pak velmi jednoduché. `bootstrap.php`:
/--php
$router = $application->getRouter();
// přidáme své routy
...
// přidáme modul forum
Forum::createRoutes($router, '//forum.example.com/');
\--


Používání rout/odkazů v šablonách
-------------------------
**Q:** Má význam, na jakém objektu metodu `link()` volám? <br />**A:** Ano, má to význam. Prohledávají se odkazy v hierarchii směrem dolů k potomkům. .[note]

V šabloně se odkay velmi často vytvářejí (příklad s využitím filtru curlyBrackets):

/--code html
<a href="{$presenter->link('edit', 10)}">self::edit(10)</a>
<a href="{$presenter->link('Product:list')}">Product::list()</a>

<a href="{$control->link('Article:view')}">Zobrazit články</a>     // jedna z možností
<a href="{$presenter->link('Article:view')}">Zobrazit články</a>   // další z možností
<a href="{$component->link('Article:view')}">Zobrazit články</a>   // a do třetice

// jiná možnost: použít všechny možnosti filtru curly brackets

<a href="{link Article:view}">Zobrazit články</a>      // control link
<a href="{plink Article:view}">Zobrazit články</a>     // presenter link
<a href="{ajaxlink Article:view}">Zobrazit články</a>  // ajax link
\--


Experimentálně lze využít i filtr netteLinks:
/--code html
<a href="nette:edit?id=10">self::edit(10)</a>
<a href="nette:Product:list">Product::list()</a>
\--

URL generuje v presenteru (a komponentě) funkce `$this->link('edit', 10)` – tedy stejně jako v šabloně. Lze vygenerovat URL sám na sebe `$this->backlink()`. K přesměrování slouží `$this->redirect(...)`, k přechodu na jiný presenter/view `$this->forward(...)`.

Multijazyčnost
--------------
Nette Framework nikomu nevnucuje konkrétní řešení. Otázkou mnohých spožitějších systémů ja multijazyčnost. Základem k jejímu vyřešení je dobrý návrh rout.
/--php
// nejjednoduchší způsob řešení
$router[] = new Route('/article/<id>', array(
    'presenter' => 'Article',
    'lang' => 'en',
));

$router[] = new Route('/clanek/<id>', array(
    'presenter' => 'Article',
    'lang' => 'cs',
));

// další z možností: název jazyka ve tvaru doménu 3. řádu
$router[] = new Route('//<lang {?cs|en}>.example.com/<id>/<view>', array( ... ), Route::ONE_WAY);
$router[] = new Route('//<lang [a-z]{2}>.example.com/<id>/<view>', array( ... ), Route::ONE_WAY);


// další možnost: povinné a volitelné parametry
// - module je zadán a není v masce => nepovinný
// - lang není zadán a podléhá masce=> povinný
$router[] = new Route('<lang [a-z]{2}>/<id>/<view>', array(
     'module' => 'Front',
     'presenter' => 'Homepage',
     'view' => 'default',
     'id' => NULL // takto definovaný parametr je volitelný
));
// poté někde ve startup(): $this->lang = $this->getParam('lang');
\--

See also:
- [Fórum: Příklady routeru | http://forum.nette.org/cs/654-priklady-routeru]
