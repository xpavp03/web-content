Nette\Security\Permission
***************************

[web-user]: http://nette.org/cs/nette-web-user

`Nette\Security\Permission` je objekt implementující rozhraní `Nette\Security\IAuthorizator` poskytující programátorovi lehkou a flexibilní ACL((Access Control List)) vrstvu pro řízení práv a přístupu.

Tato vrstva velmi úzce souvisí s objektem [Nette\Web\User | web-user] a jejím základem je definování pravidel (*rules*).

Autorizace (zjištění, zda má uživatel právo to či ono udělat) rozhoduje se na základě **rolí** (*roles*), **zdrojů/objektů** (*resources*) a **práv/akcí** (*privileges*), která v celé aplikaci určí kdo může přistupovat k chráněnému objektu a jaké akce s ním může vykonávat.

<br />
Lépe poslouží jako vysvětlení následující příklad webové aplikace:

**Nepřihlášený** (neautentizovaný) návštěvník webu (což je výchozí role [Nette\Web\User | web-user]) může číst a procházet veřejnou část webu, tzn. číst články, komentáře, novinky a volit v anketách.

Oproti tomu **přihlášený** uživatel, který je registrován může dostávat novinky mailem a komentovat.

Další uživatelé mají přístup k administrační části a mohou provádět úkony jako psát a spravovat své příspěvky a provádět různé změny v aplikaci (třeba změnit vzhed, záhlaví, zápatí) a mají samozřejmě i práva procházet veřejnou část a dostávat novinky mailem.

Nadefinovali jsme si tedy určité **role** (`guest`, `registered` a `administrator`) a **objekty** (`news`, `article`, `poll`, `comments`, `backend`), ke kterým mohou uživatelé s nějakou rolí přistupovat nebo provádět určité **akce** (`view`, `vote`, `comment`, `feed`, `edit`).

Jednoduše řečeno
=============
- **role** (*role*) je vlastnost uživatele, který může přistupovat k objektům/zdrojům
- **zdroj** (*resource*) je objekt který je kontrolován
- **práva** (*privilege*) jsou akce, které může s objektem provádět uživatel s rolí

Vzájemné vazby kdo co může s čím dělat ale určijí až **pravidla** (*rules*), které jsou uchovávány právě objektem *Permission*. Ten toho umí samozřejmě víc, než jen uchovávat pravidla.

Zároveň je tu ještě jedna vazba, možná ne na první pohled zcela zřejmá, a to **dědičnost rolí**, která zajistí, že uživatel s rolí administrátor může dělat i to co obyčejný návštěvník webu.

|----------------------------------------------------
|role           |unikátní práva         | rodič      |
|----------------------------------------------------
|guest          |view, vote             | NULL       |
|registered     |feed, comment          | guest      |
|administrator  |edit                   | registered |

Poznámka: práva administrátora lze nadefinovat i jako 'bez omezení' tzn. bez rodičů od kterých by dědil nějaká omezení (viz níže).


Začínáme
*******
Nejprve si ukážeme, jak nadefinovat objektu *Permission* uživatelské role.
 Ještě před tím je ale třeba vytvořit instanci třídy, se kterou budeme pracovat.
/--php
$acl = new Permission();
\--


Role (Roles)
=========
Jak již bylo řečeno, budeme postupně vytvářet **stromovou strukturu rolí**, která dědí oprávění od svých rodičů.
 Použijeme výše zmíněný příklad webové aplikace o třech rolích. Mějmě tedy role `guest`, `registered` a `administrator`.


/--php
$acl->addRole('guest');
$acl->addRole('registered', 'guest');
$acl->addRole('administrator', 'registered');

// alternativně
$acl->addRole('administrator', array('guest', 'registered'));
\--

Docela triviální že? Tímto zajístíme, že se nám vlastnosti přenášejí z rodičovské role na potomky.
 Na příkladu vidíte, že je jedno jestli jako rodiče uvedete pole nebo řetězec, objekt `Nette\Security\Permission` přelouská obojí.

Za zmínku stojí metoda `getRoleParents()`, která vrací pole se všemi rodičovskými rolemi a také metoda `roleInheritsFrom()`, která zjistí, zda-li od sebe dědí dvě role. Jejich použití:

/--php
$acl->roleInheritsFrom('administrator', 'guest'); // TRUE
$acl->getRoleParents('administrator'); // array('guest', 'registered')
\--


Zdroje neboli objekty (Resources)
=========================
Nyní je čas nadefinovat i seznam objektů, ke kterým mohou uživatelé s rolemi přistupovat.

/--php
$acl->addResource('news');
$acl->addResource('article');
$acl->addResource('poll');
$acl->addResource('comments');
$acl->addResource('backend');
\--

I zdroje/objekty mohou vytvářet stromovou strukturu.
 Využítí? Napadá mě možná e-shop, kde by kategorie dědila produkt.
 Metody pro manipulaci se zdroji jsou podobné jako s objekty, liší se jen názvy: `resourceInheritsFrom()`, `removeResource()` atd.


Práva a pravidla (Privileges & Rules)
==========================
A teď to nejdůležitější. Samotné role a objekty by nám byli k ničemu, musíme mezi nimi vytvořit ještě pomocí práv/akcí vazby (neboli **pravidla**).


/--php
// host může prohlížet obsah jen veřejné části, hlasovat v anketách
$acl->allow('guest', array('news', 'article', 'poll', 'comments'), 'view');

// předchozí příkaz alternativně ve dvou příkazech: (ale trochu přes koleno)
$acl->allow('guest', NULL, 'view');
$acl->deny('guest', 'backend', 'view');

$acl->allow('guest', 'poll', 'vote');


// registrovaný dědí právo view od hosta, ale má i právo komentovat a dostávat novinky mailem
$acl->allow('registered', 'comments', 'comment');
$acl->allow('registered', 'news', 'feed');


// ale jelikož už moc práv nezbývá, můžeme je určit i výčtem jako u předchozích tak,
// abychom mu umožnili i přístup do administrace, který jsme zamezili hostovi a registrovanému
// a na víc ke všemu dostane práva view a edit
$acl->allow('administrator', NULL, array('view', 'edit'));
$acl->allow('administrator', 'backend', 'view');
\--


Autentizace
=========
Nyní když máme vytvořený seznam pravidel, můžeme jednoduše provádět autentizaci.

/--php
$acl->isAllowed('guest', 'article', 'view') ? "allowed" : "denied";  // allowed
$acl->isAllowed('guest', 'article', 'edit') ? "allowed" : "denied";  // denied
$acl->isAllowed('guest', 'backend', 'view') ? "allowed" : "denied";  // denied
$acl->isAllowed('guest', 'poll', 'vote') ? "allowed" : "denied";  // allowed

// registrovaný dědí od hosta jak práva tak omezení
$acl->isAllowed('registered', 'article', 'view') ? "allowed" : "denied";  // allowed
$acl->isAllowed('registered', 'comments', 'comment') ? "allowed" : "denied";  // allowed
$acl->isAllowed('registered', 'backend', 'view') ? "allowed" : "denied";  // denied

// administrátor nemá nyní žádné omezení
$acl->isAllowed('administrator', 'poll', 'vote') ? "allowed" : "denied";  // allowed
$acl->isAllowed('administrator', 'backend', 'view') ? "allowed" : "denied";  // denied
\--


<br />
Práva administrátora lze nadefinovat i jako 'bez omezení' tzn. bez rodičů od kterých by dědil nějaká omezení. Vypadalo by to asi takto:
/--php
$acl->removeRole('administrator');  // odeberu roli z pravidel
$acl->addRole('administrator');  // vytvořím roli znova, ale bez předků
$acl->allow('administrator');  // nastavím pravidlo: všechna práva a všechny zdroje pro administrátora bez omezení
\--

Můžete si všimnout že kdykoliv za běhu aplikace můžeme i odebrat roli. A nejenom ji, odebírat ze seznamu pravidel lze objekty: `removeResource()`, `removeAllResources()`; ale i samotná pravidla: `removeAllow()`, `removeDeny()`.
Máme zde i metody na kontrolu přítomnosti nějaké role nebo objektu: `needRole()`, `needResource()`; které vyhodí výjimku *InvalidStateException* pokud není zjištěna jejich přítomnost.


Napojení na `Nette\Web\User`
========================
Na začátku jsem zmiňoval, že celá třída `Nette\Security\Permission` velmi úzce navazuje na [Nette\Web\User | web-user]. Dá se používat zcela bez něj, ale spolu dosáhnou maximální efektivity.

A začneme hned na příkladu.

Pro začátek je potřeba zaregistrovat autorizační a autentizační handler:
/--php
Environment::getServiceLocator()->addService(new Acl,   'Nette\Security\IAuthorizator');
Environment::getServiceLocator()->addService(new Users, 'Nette\Security\IAuthenticator');
\--

nebo v config.ini
/--code
service.Nette-Security-IAuthenticator = Users
service.Nette-Security-IAuthorizator  = Acl
\--

kde třída *Acl* bude náš autorizační handler, potomek třídy `Nette\Security\Permission` obohacená o konstruktor, který sestaví všechna pravidla, zdroje a role (neboli kód z ukázek tohoto tutoriálu nacpaná do konstruktoru, kde `$acl` nahraďte `$this`).

Třída *Users* bude autentizační handler, neboli třída *Users* z příkladu **Akrabat** z distribuce.

Tu obohatíme o pár řádek kódu:
/--php
class Users extends DibiTable implements Nette\Security\IAuthenticator
{
	public function authenticate(array $credentials)
	{
		$row = $this->fetch(array('username' => $credentials['username']));

		if ($row['password'] !== $credentials['password']) {
			throw new AuthenticationException('', AuthenticationException::INVALID_CREDENTIAL);
		}

		$acl = Environment::getService('Nette\Security\IAuthorizator');
		if ($row['role'] !== NULL) {
			$roles = $acl->getRoleParents($row['role']);
			$roles[] = $row['role'];
		} else {
			$roles = $row['role']; // or $roles = NULL
		}

		unset($row['password']);
		unset($row['role']);
		return new Nette\Security\Identity($row['username'], $roles, $row);
	}

}
\--

ještě upravíme tabulku v databázi o atribut `role` do následující podoby:

;
CREATE TABLE [users] (
    [id] INTEGER  NULL PRIMARY KEY,
    [username] VARCHAR(50)  UNIQUE NOT NULL,
    [password] VARCHAR(50)  NOT NULL,
    [role] VARCHAR(50)  NOT NULL,
    [real_name] VARCHAR(100)  NOT NULL
)
\--

naplňte si ji nějakými smysluplnými hodnotami pro otestování a můžete začít zkoušet.

Kdekoliv v aplikaci, nebo v nějakém vašem modelu, komponentě stačí zavolat:
/--php
$acl  = Environment::getService('Nette\Security\IAuthorizator');
$user = Environment::getUser();

// samotná autorizace
if ($user->isAllowed($resource, $privilege)) { ... }
\--

Metoda `isAllowed()` má nyní jen dva parametry, **role** se sama doplní pomocí metody `getRoles()` a v cyklu se projdou všechny role a při prvním kladném vyhodnocení se kladně vyhodnatí i podmínka výše. To vše je již implementováno v `Nette\Web\User`.
 U proměnné `$user` můžeme dále používat veškeré metody uvedené v [Nette\Web\User | web-user].


V praxi u složitějších aplikací (v aplikacích kde chceme umožňovat dynamickou úpravu rolí, zdrojů) bude konstruktor třídy *Acl* vypadat určite jinak. V malých aplikacích ale můžeme bez problémů 'natvrdo' nadefinovat seznam v konstruktoru, hůř se nám ale bude spravovat celá aplikace, dojde-li na nějaké úpravy nebo rozšíření rolí.

Nejlépe si vytvořit tabulku se sloupečky id, role, resource, privilege, allowed.
/--code sql
CREATE TABLE [acl] (
    [id] INTEGER NOT NULL PRIMARY KEY,
    [role] VARCHAR(50)  NOT NULL,
    [resource] VARCHAR(50),
    [privilege] VARCHAR(50),
    [allowed] INTEGER NOT NULL DEFAULT 1
)
\--


Nebo ještě lépe `id_role`, `id_resource`, a `id_privilege` jako cízí klíče a spojovat pomocí relací tabulky `roles`, `resources` a `privileges`.
Z tabulky poté vygenerovat objekt `Nette\Security\Permission` a ten kešovat pomocí [Nette\Caching | http://nette.org/cs/nette-caching]




/--comment
- role je skutečně role uživatele - např. moderátor, redaktor, návštěvník, zaregistrovaný uživatel, správce...
- zdrojem (sloupec `resource`) se rozumí nějaký logický prvek webu/aplikace - článek, stránka, uživatel, položka v menu, anketa... - při dobrém návrhu aplikace bude jistě možné použít presenter = resource
- oprávněním (sloupec `privilege`) se rozumí nějaká konkrétní činnost, kterou uživatel může (nebo naopak nemůže - podle sloupce `allowed`) s prvkem dělat - například stránka půjde smazat, upravit, vytvořit, s článkem půjde dělat totéž + komentovat, s anketou také totéž, navíc půjde hlasovat, falšovat výsledky k potěšení vlastního ega...
- sloupec `allowed` bude indikovat, zda uživateli dané role bude daná činnost se 'zdrojem' povolena, či odmítnuta (pokud objekt Permission nenajde pravidlo pro danou roli, resource a oprávnění, tak bude automaticky odmítnuta)
