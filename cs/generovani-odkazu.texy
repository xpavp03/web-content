Generování odkazů
*****************

Parametry metody `link()` nesouvisí přímo s URL. Prvním argumentem je cíl (destination) určující cílový presenter & action, druhým (resp. dalšími) jsou parametry předávané tomuto presenteru:

/--code php
$this->link(destination [,arg [,arg ...]]);
\--

kde destination je:
- `'anotherAction'` (odkaz na aktuální presenter a anotherAction)
- `'AnotherPresenter:anotherAction'` (odkaz na AnotherPresenter a anotherAction)
- `'AnotherPresenter:'` (ozkaz na AnotherPresenter a výchozí action 'default')
- `'AnotherModule:Presenter:action'` (odkaz do jiného modulu)

Parametry presenteru je možné předat jako asociativní pole:

/--code php
$this->link('show', array('id' => 10, 'lang' => 'en'));
\--

Asociativní pole není příliš sexy, proto Nette nabízí vychytávku: pokud existuje v cílovém presenteru metoda `renderShow($id, $lang, ...)` nebo metoda `prepareShow($id, $lang, ...)`, kde ono 'show' v názvu odpovídá názvu linkovaného view, je možné klíče 'id' a 'lang' vynechat - automaticky se vezmou z parametrů těchto metod:

/--code php
$this->link('show', array(10, 'en'));
\--

A naopak, když je dotyčná metoda po odkliknutí zavolána, tak se jí předají tyto argumenty v parametrech `$id` a `$lang`. V poli je možné uvést další parametry, které metody `renderShow` a `prepareShow` nedefinují, například lze nastavit nějaký persistentní parametr (v tom případě ovšem už s asociativním klíčem). Pokud žádný takový další parametr není, je možné pole úplně vynechat:

/--code php
$this->link('show', 10, 'en');
\--

Tedy v Nette se odkazuje na presenter & action, nebo ještě jednodušeji: odkazuje se na konkrétní metodu. `$this->link('catalog:show', 10, 'en')` odkazuje a po odkliknutí zavolá metodu `CatalogPresenter::renderShow(10, 'en')`. Jaké se vytvoří URL v tu chvíli nehraje roli. To je úkol oddělené vrstvy - routování.


Odkazování v šablonách
-------------------------
Rozlišujeme více možností vytvoření odkazu, proto **není jedno na jakém objektu metodu `link()` voláme**. Jelikož action/view může měnit pouze presenter, komponenty pracují vždy pod tímto prahem. Navíc se prohledávají odkazy v hierarchii směrem dolů k potomkům. Tudíž `$component->link()` vede na [signál | Nette\Application\Presenter#subrequest], `$presenter->link()` obvykle na view (nebo signál, je-li označen vykřičníkem). V šablonách se za asistence filtru curlyBrackets může odkaz nad komponentou zkrátit pomocí značky `{link}` a odkaz nad presenterem pomocí `{plink}`.

V šabloně presenteru jsou zápisy `$presenter->link()` a `$component->link()` **ekvivalentní** (platí i pro zkrácený zápis `plink` a `link`), protože **i presenter je komponentou** a jako navázaný presenter uvažuje sám sebe.

Rozdíl se projeví v šablonách komponent, kde zápis `{link Home:default}` nevygeneruje odkaz, ale signál na komponentu, zatímco `{plink Home:default}` vygeneruje platný odkaz na presenter, se kterým je spárována.

V šabloně se odkazy velmi často vytvářejí za pomoci filtru curlyBrackets:

/--code html
{* odkaz nad presenterem *}
<a href="{$presenter->link('edit', 10)}">self::edit(10)</a>
<a href="{$presenter->link('Product:list')}">Product::list()</a>
<a href="{$presenter->link('Article:view')}">Zobrazit články</a>

{* odkaz nad komponentou *}
<a href="{$component->link('Article:view')}">Zobrazit články</a>
<a href="{$control->link('Article:view')}">Zobrazit články</a>

{* zkrácený zápis *}
<a href="{plink Article:view}">Zobrazit články</a>
<a href="{link Article:view}">Zobrazit články</a>
<a href="{link Article:view}" onclick="{ajaxlink Article:view}">Zobrazit články</a>
\--

*Poznámka: proměnné $presenter, $component a $control jsou frameworkem předávány šabloně automaticky. Pro více informací shlédněte dokumentaci třídy [Control|Nette\Application\Control] či její [API | api:Nette\Application\Control#methodcreateTemplate].*


Zkrácený zápis `plink` a `link` je vhodnější použít, pokud dopředu známe počet parametrů. Pokud počet parametrů neznáme, předáme parametry polem. Při předávání parametrů polem ale musíme využít nezkráceného zápisu, jinak by došlo k obalení pole `$args` ještě prázdným polem.

/--code html
{* pokud znám počet parametrů, můžu použít zkrácený zápis *}
{link default, 'id' => 5, 'name' => 'název produktu'}

{* pro předání parametrů polem se musí zatím použít nezkrácený zápis *}
{? $args = array('id' => 5, 'name' => 'název produktu'); ?}
{$presenter->link('default', $args)}

{* v budoucnu možná bude tento nedostatek eliminován označením proměnné (pole) hvězdičkou *}
{link default, *$args}
\--


Zkrácený zápis `ajaxlink` se používá u Ajaxových aplikací a je filtrem přeložen jako `$control->ajaxLink()`. Zde však vytváříme u defaultního `AjaxDriveru` celý kousek JavaScriptového kódu pro použití v 'eventových' atributech HTML – `onclick, onsubmit`. Značky `link`, `plink` a `ajaxlink` lze zkombinovat se [signály|Nette\Application\Presenter#subrequest] a dosáhnout tak rychlé a efektivní tvorby. Ve spojení s Ajaxem již ale mluvíme o Ajaxových požadavcích, nikoliv o signálech.

*Poznámka: Jelikož v Nette není práce s AJAXem není nijak standardizovaná, je možno volat v `onclick` vlastní kód (tak jak je to v příkladu `fifteen`)  a metodu `ajaxlink` vůbec nepoužívat.*


Pro odkazování lze experimentálně využít i filtr netteLinks:
/--code html
<a href="nette:edit?id=10">self::edit(10)</a>
<a href="nette:Product:list">Product::list()</a>
\--


Shrňme si to:
- `$component->link()` neboli `link` generuje odkaz nad komponentou
- `$presenter->link()` neboli `plink` generuje odkaz nad presenterem
- v obyčejné šabloně presenteru je za komponentou považován presenter, tudíž je možno v presenteru použít i `link`
- zkrácený zápis `link` a `plink` se hodí především známe-li počet parametrů (jsou-li nějaké)


Odkazování uvnitř presenteru a komponent
------------------

URL generuje v presenteru a komponentě funkce `$this->link('edit', 10)` – tedy stejně jako v šabloně. Lze vygenerovat URL sám na sebe `$this->backlink()`.

K **přesměrování** slouží `$this->redirect(...)`, k přechodu na jiný presenter/action `$this->forward(...)`. Rozdíl je v tom, že `redirect` provede přesměrování na jinou stránku pomocí HTTP a `forward` jen přepošle zpracování jinam.


Viz také: .[see]
- [Fully qualified action]
- [Routování]
