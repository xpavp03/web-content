Nette\Caching
**************

Knihovna sloužící k ukládání dat do keše. .[perex]

Příklad použití:

/--php
$cache = new Cache; // nebo $cache = Environment::getCache()

// zápis do cache:
$cache['data'] = $myData;

// čtení z cache
$cachedData = $cache['data'];

// mazání z cache
unset($cache['data']);
// nebo
$cache['data'] = NULL;

// ověření, zda je položka v keši
if (isset($cache['data'])) ...
// nebo
$cachedData = $cache['data'];
if ($cachedData !== NULL) ...
\--

Do keše lze ukládat jakékoliv struktury, nemusí to být jen řetězec.

Takže taková jednoduchá implementace by mohla vypadat třeba takto:

/--php
if (isset($cache['template'])) {
    $template = $cache['template'];
} else {
    $template = sloziteGenerovani();
    $cache['template'] = $template;
}

echo $template;
\--

Ale to není zdaleka vše. Při ukládání položek lze specifikovat několik dalších parametrů a podmínek pro invalidaci. Protože v případě přiřazení `$cache['key'] = $data` není kde tyto podmínky specifikovat, použijeme pro ukládání obsahu funkci `$cache->save($key, $data, $options)`. Parametr `$options` je pole, které může mít tyto klíče:

/--
   expire => (int) čas, kdy obsah vyexpiruje
   refresh => (bool) má se expirace prodlužovat?
   files => (array) seznam souborů, na kterých cache závisí
   items => (array) seznam klíčů v keši, na kterých tato položka závisí
   tags => (array) seznam vlastních tagů
   priority => (int) priorita
   consts => (array) seznam konstant, na kterých cache závisí
\--

Příklad použití:

Cache vyexpiruje za 10 min:

/--php
$cache->save($key, $value, array(
    'expire' => time() + 60 * 10,
));
\--

Cache vyexpiruje za 10 min. Pokud v té době bude načtena, expirace se prodlouží na dalších deset minut.

/--php
$cache->save($key, $value, array(
    'expire' => time() + 60 * 10,
    'refresh' => TRUE,
));
\--

Cache vyexpiruje v okamžiku, kdy se změní kterýkoliv z uvedených souborů. V praxi to používám třeba pro kešování konfigurace nebo šablon - jakmile se příslušný soubor změní, Nette automaticky invaliduje i keš.

/--php
$cache->save($key, $value, array(
    'files' => array('template.phtml', 'config.ini'),
));
\--

Cache je závislá na jiných položkách v keši - vyexpiruje v okamžiku, kdy se změní položky s klíčem 'key1' nebo 'key2'. To lze využít tehdy, když kešujeme třeba www stránku a pod jinými klíči její části. Jakmile se část změní, invaliduje se celá stránka.

/--php
$cache->save('key3', $value, array(
    'items' => array('key1', 'key2'),
));
\--

Položce můžeme přiřadit seznam vlastní tagů. To lze použít třeba tehdy, pokud kešujeme www stránku, kde je článek + komentáře. Jakmile se článek změní, nebo jakmile se objeví nový komentář, necháme vyexpirovat všechny položky s příslušným tagem:

/--php
$cache->save($key, $value, array(
    'tags' => array('clanek#10', 'komentare#10'),
));

// vyexpirujeme všechny položky s tagem 'komentare#10':
$cache->clean(array(
    'tags' => array('komentare#10'),
));
\--

Nakonec je tam položka priorita, podle které lze cache čistit:

/--php
$cache->save($key, $value, array(
    'priority' => 50,
));

// smažeme všechny položky s prioritou rovnou nebo menší 100:
$cache->clean(array(
    'priority' => 100,
));
\--

Všechny parametry lze navzájem kombinovat.

.[see]
Viz také:
- [Kešování HTML výstupu]
- [Nette\Caching\ICacheStorage]
- [Nette\Caching\Cache API reference | api:Nette\Caching\Cache]
