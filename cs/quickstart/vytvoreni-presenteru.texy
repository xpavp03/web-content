Vytvoření presenteru
********************

.[perex]
Dalším krokem, který provedeme, bude vytvoření tzv. "presenteru". To bude takový "ředitel" naší aplikace.

Princip MVP (a MVC)
===================
Nette Framework podporuje užitečný návrhový vzor Model-View-Controler (MVC), v našem případě je písmenko "C" nahrazeno písmenkem "P". Nette Framework místo "controleru" používá "presenter".

Ten návrhový vzor MVP (i MVC) je ve skutečnosti velmi jednoduchý - spočívá v tom, že naši **aplikaci rozdělíme do tří částí** (ano, budou jimi *Model, View a Presenter*), které budeme moci vyvíjet a především **udržovat samostatně**. Tím návrh naší aplikace získá na robustnosti a flexibilitě a budeme jej díky tomu snadno udržovat.

Na následujícím obrázku vidíme schéma toho, jak návrhový vzor MVP vlastně pracuje:

[* mvp-interaction.png *]

Celý ten kolotoč začíná tím, že uživatel po naší aplikaci něco chce, to se zpravidla projevuje tím, že on (resp. jeho webový prohlížeč) vytvoří požadavek (červená šipka od Usera k Presenteru), který směřuje na nějakou URL.

Tento požadavek Nette Framework pomocí něčeho, čemu se říká *routování* a *routovací pravidla*, a k čemu se podrobněji dostaneme později, zanalyzuje a najde příslušný presenter, který spustí a *předá mu řízení*.

Presenter sám si popovídá z modelem, kterému sdělí jaká data požaduje. Model tato data načte (kde je vezme je jeho problém, který presenter **naprosto nezajímá**, mohou to být souborů, databáze, či jiný zdroj dat).

Presenter tato data vezme a předá je pohledu (model by měl presenteru usnadňovat práci, pokud data, která získáte ze svých modelů, musíte v presenteru filtrovat, je to **špatně** a váš model by neměl dostat výplatu, nebo byste ho měli rychle opravit). Správně vychovaný model dá presenteru **přesně ta data, která presenter potřebuje** a ten je z modelu pouze načte a předá je pohledu.

Pohled sám se už postará o jejich vykreslení. To jak to dělá je ale opět něco, co náš presenter zcela nezajímá.

.[note]
O modelu a pohledu si řekneme více až za chvilku.

Jak funguje presenter
=====================

Ta podivná věta o tom předávání řízení si zasluhuje lehké vysvětlení: Stejně jako má v MVC aplikacích každý *Controler* několik různých *akcí*, má i v Nette Frameworku každý *Presenter*, několik *akcí*. Co to znamená?

Jak už jsme si řekli

.[note]
Pro více informací o MVP si přečtěte [Model, View a Presenter|doc:model-view-presenter]



.[caution]
Tato stránka je stále v procesu tvorby, informace od této hlášky dále nejsou relevantní. Dodělám to někdy během pátku (by Inza).

-------------------

Pokud bychom se nyní pokusili aplikaci spustit, Nette by nám odpovědělo chybovou hláškou: *Cannot load presenter Default, class DefaultPresenter was not found in .../app/presenters/DefaultPresenter.php*. Je tedy potřeba vytvořit tzv. presenter.


Pod pojmy *presenter* resp. *view* (česky *pohled*) se v Nette Frameworku nazývá něco podobného, jako se rozumí pod termíny *controller* resp. *action* u jiných MVC frameworků (viz [Model-View-Presenter] architektura). Protože v souboru `bootstrap.php` jsme nenastavovali žádné speciální chování, žádá si aplikace výchozí presenter, který nese název `Default`, a výchozí pohled nazvaný `default`. Jak lze vyčíst z výše uvedené chybové hlášky, presenter `Default` by se měl nacházet v souboru `DataGrid/app/presenters/DefaultPresenter.php`. Tak si jej vytvořte:

/--php
<?php

class DefaultPresenter extends /*Nette\Application\*/Presenter
{

}
\--

Ačkoliv presenter neobsahuje žádný kód, Nette Framework udělá užitečnou věc - načte a zobrazí šablonu. Tu očekává buď v souboru `DataGrid/app/templates/Default/default.phtml` nebo alternativně v souboru `DataGrid/app/templates/Default.default.phtml` (rozdíl je v lomítku a tečce). Cesta je tedy tvořena z názvu presenteru, pohledu a přípony `.phtml`, která vhodně odlišuje šablony od jiných PHP skriptů.

*Poznámka: konvence doporučuje pojmenovávat presentery ve stylu PascalCaps (tedy s velkým písmenem na začátku) a pohledy ve stylu camelCaps (tedy začínající malým písmenem).* .[note]

Vytvořte proto ještě šablonu `DataGrid/app/templates/Default.default.phtml` s tímto obsahem:

/--code html
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>DataGrid – Nette Framework example</title>
</head>

<body>
	<h1>It works!</h1>
</body>
</html>
\--

Nyní si otevřete aplikaci ve webovém prohlížeči. Měli byste vidět nápis **It works!** Pokud vám něco nefunguje, nebo pokud jste byli lenošní si adresářovou strukturu a soubory vytvářet, nabízím vám je [ke stažení | download:tutorial.datagrid.part1.zip] :-)

**Gratuluji, vytvořili jste svou první aplikaci v báječném Nette Frameworku!**

A teď se konečně dostaneme k té zajímavější části návodu.
