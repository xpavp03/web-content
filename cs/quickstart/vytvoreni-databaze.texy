Vytvoření databáze
******************

.[perex]
Jako každá aplikace, která pracuje s nějakými daty, i náš todo list potřebuje svá data někam ukládat. Tohle *"někam"* pro nás bude představovat MySQL databáze. V souladu s dobrými návyky softwarového inženýrství, je dalším logickým krokem tedy to, že tuto databázi navrhneme a vytvoříme. Tak hurá na to!

Návrh databáze
==============
Když chceme databázi navrhnout jako první se musíme zamyslet nad tím, co do naší databáze budeme potřebovat uložit. Vyjdeme z toho, že chceme vytvořit jednoduchý todolist. Takový todolist obsahuje jednotlivé úkoly.

Struktura databáze
------------------
-> Budeme tedy potřebovat jednu tabulku, kam uložíme ty úkoly.

Otázka zní, co všecho bude takový jeden úkol mít?

Struktura tabulky
-----------------
* No, tak jednak u něho potřebujeme vědět, zda už je, či není splněn -> tudíž budeme potřebovat jeden sloupeček typu ANO/NE (boolean)
* Úkol by také mohl mít svůj text, dlouhý maximálně 100 znaků -> potřebujeme sloupeček typu řetězec (varchar), s velikostí 100
* Také budeme potřebovat vědět datum a čas, kdy byl úkol přidán -> potřebujeme jeden sloupeček typu časové razítko (timestamp)
* No a jelikož budeme chtít, aby šly názvy úkolů měnit, budeme potřebovat jeden sloupeček, podle kterého jednotlivé úkoly od sebe odlišíme -> bude to číslo, které použijeme jako ID, neboli primární klíč (int)

Sečteno podtrženo by naše tabulka měla vypadat nějak takto:

*Struktura tabulky "tasks":*
.(Struktura tabulky "tasks")
|----------
| id (int, PK): | text (varchar(30)): | added (datetime): | done (enum(yes,no)):
|----------

když by v ní byla nějaká data pak:

*Možný obsah tabulky "tasks":*
.(Možný obsah tabulky "tasks")
|----------
| id (int, PK): | text (varchar(30)): | added (datetime): | done (enum(yes,no)):
|----------
| 1 | úkol 1 | 2010-01-24 18:16:05 | no
| 2 | úkol 2 | 2010-01-24 18:17:45 | no
| 3 | úkol 3 | 2010-01-24 18:18:12 | yes

Vytvoření databáze
==================

Když strukturu naší tabulky vyjádříme SQL příkazem v MySQL dialektu pak získáme:

/--code sql
CREATE TABLE `tasks` (
  `id` int(11) NOT NULL auto_increment,
  `text` varchar(100) NOT NULL,
  `added` datetime NOT NULL,
  `done` enum('yes','no') NOT NULL default 'no',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
\--

Příkazy, pomocí kterých bychom do ní mohli přidat testovací data lze v MySQL vyjádřit takto:

/--code sql
INSERT INTO `tasks` VALUES('1','úkol 1','2010-01-24 18:16:05','no'),
 ('2','úkol 2','2010-01-24 18:17:45','no'),
 ('3','úkol 3','2010-01-24 18:18:12','yes');
\--

Když oba dva SQL skripty spojíme a přidáme příkazy pro vytvoření a vybrání databáze společně s několika dalšími detaily, získáme následující SQL skript:

/--code sql
SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;

CREATE DATABASE `todolist`;

USE `todolist`;

DROP TABLE IF EXISTS `tasks`;

CREATE TABLE `tasks` (
  `id` int(11) NOT NULL auto_increment,
  `text` varchar(100) NOT NULL,
  `added` datetime NOT NULL,
  `done` enum('yes','no') NOT NULL default 'no',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `tasks` VALUES('1','úkol 1','2010-01-24 18:16:05','no'),
 ('2','úkol 2','2010-01-24 18:17:45','no'),
 ('3','úkol 3','2010-01-24 18:18:12','yes');

SET FOREIGN_KEY_CHECKS = 1;
\--

Pomocí tohoto SQL skriptu lze vytvořit naši databázi včetně testovacích dat.

Tento skript si uložíme do souboru `tasks.sql` do adresáře `TodoList/app/`.

Hotovo
======

Tak a naše databáze je hotova - ani to moc nebolelo ne? :-)

.[note]
Výsledek této části průvodce si můžete stáhnout níže.

Co bychom si měli zapamatovat?
==============================
* Databázi, neboli datový layer, navrhujeme vždy dřív než začneme vyvíjet, je to první krok vývoje
* Strukturu databáze navrhneme nejprve na papír, či pomocí specializovaného nástroje a potom jej přepíšeme (nebo to udělá nástoj za nás) do SQL.
* SQL obsahuje strukturou databáze a může obsahovat a základní data (tzv. fixtures), toto SQL si archivujeme, zpravidlav repozitáři s aplikací (pozn. místo SQL lze v případě pokročilých nástrojů používat alternativní fomráty - např. YAML)
* Pokud používáme databázi `MySQL`, tak nesmíme zapomenout na příkaz `SET NAMES utf8` na začátku komunikace!


------------

*Když máme vyřešeno úložiště dat, můžeme začít vytvářet samotnou aplikaci. Už se těším! Začneme vytvořením presenteru...*

{{attachment: todo-list.zip}}
