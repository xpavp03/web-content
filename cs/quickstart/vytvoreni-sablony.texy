Vytvoření šablony
*****************

/--comment
Todo:
* Přidat odkazy do officiální dokumentace
\--

.[perex]
Tak, když už máme konečně ten teoretický presenterový porod za sebou, vytvoříme si šablonu - to je o mnoho zábavnější. Hurá na to!

Co je to šablona?
=================
Šablona, neboli pohled (anglicky View), jak se jí občas říká, je to písmenko "V" z M**V**C. Je to prostě věc, která je zodpovědná za zobrazení dat uživateli.

Pojďme se podívat, jak tyhlety šablony vnímá Nette Framework:

Co je to šablona v Nette Frameworku?
====================================
Pro Nette Framework je šablona soubor s názvem `XXX.phtml`, kde `XXX` nahradíme názvem akce, ke které šablona patří (s malým počátečním písmenem). Tento soubor se nachází v adresáři `/app/templates/YYY/`, kde `YYY` nahradíme názvem presenteru, ke kterému tato šablona patří (zde pro změnu s velkým počátečním písmenem).

Šablona obsahuje informace o tom, co má daná akce daného presenteru vykreslit (vypsat) na obrazovku. A ano, jak správně čekáte, právě v těchto souborech jsou kousky HTML, ze kterých se postupně poskládá celá stránka. V těchto souborech toho ale může být mnohem víc. - O tom ale až o několik řádek níže.

Z výše uvedeného vyplývá následující:

Každá šablona vždy patří jednomu konkrétnímu Presenteru - jenom to jí ovšem nestačí a proto patří vždy k **jedné konkrétní akci jednoho konkrétního presenteru**.

**Příklad:**
Máme náš presenter `Todolist`, který jsme si vytvořili na minulé stránce. Ten má akci `show`. Když vytvoříme k této akci šablonu, tak:

* tato šablona bude soubor se jménem `show.phtml`
* který se bude nacházet v adresáři `app/templates/Todolist/`
* cesta k tomuto souboru tedy bude tato `/app/templates/Todolist/show.phtml`

Když už víme *co* je to ta šablona, můžeme si povědět o tom, co je *v ní*. Než tak ale učiníme, povíme si ještě o konceptu *dvoufázového renderování*.

.[note]
Mohou existovat akce, které nemají své šablony. Tyto akce ale potom buď nemají žádný výstup a nebo využívají šablon jiných akcí. - Tedy ano, lze docílit toho, že budou mít dvě akce stejnou šablonu. - Ale toto neznamená, že by jedna šablona patřila ke dvěma akcím. Naopak jedna akce používá šablonu, která patří k jiné akci (taky v tom nevidíte moc velký rozdíl? Sice není vidět ale je tam, časem se k němu dostaneme).

.[note]
Místo, kde Nette Framework hledá šablony, lze změnit, stejně jako výše uvedené konvence pro jejich pojmenovávání. Nette Framework dokonce již defaultně zkouší prohledávat několik různých míst. O tom ale detailněji až jindy a jinde. Nette Framework vás nikdy k ničemu nenutí.

.[tip]
Pokud jste zmatení z těch různých termínů "šablona", "template" a "pohled", vezte, že jsou to jen tři různá slova, která znamenají to samé. Když někdo mluví o "šablonách", "templejtách" a "pohledech", vždycky tím myslí tyto soubory s koncovkou `.phtml`.

Dvoufázové renderování šablon
=============================
Nette Framework je každý správný moderní framework vybaven takovou chytrou věcí, která má šílený název. Jmenuje se to "dvoufázové renderování šablon" a je to věc, která nám hodně pomůže.

Taky jste si všimli, že se vaše webové aplikace často skládají z nějaké části, která je na všech stránkách stejná? Nadpis, logo, atd.? Tomu, co zůstává stále stejné, se někdy říká "layout" webu a tomu, co se mění, se říká "obsah".

Prakticky **každá** webová stránka má tyto dvě části (aneb komu by se chtělo HTML meta tagy psát ke keždé akci?).

A k tomu, abychom s nimi mohli efektivně pracovat, nám slouží právě ono "dvoufázové renderování šablon".

V praxi to znamená to, že Nette Framework má ke každé akci ve skutečnosti hnedle ne jednu, ale *dvě šablony*:

Šablona akce
------------
Jednu z nich jsme si již představili výše - to je ta, která se jmenuje jako akce s koncovkou `.phtml` a která se nachází v adresáři, která se jmenuje jako presenter. Tahleta šablona je ta, do které se ukládá vzhled obsahu stránky a proto s jí říká *obsahová šablona*, *patrial šablona*, *šablona části*, nebo také "šablona akce", či konkrétněji "šablona akce XXX", kde XXX je název té akce, ke které patří - protože právě tato šablona je pro každou akci jiná (většinou). My v tomto tutoriálu budeme používat termín "šablona akce XXX".

**Příklad:**
Naší šabloně, o které jsme mluvili v minulém příkladu - tedy o té, co je uložena v souboru `/app/templates/Todolist/show.phtml`, budeme říkat "šablona akce show", nebo "šablona akce show presenteru Todolist".

Šablona layoutu
---------------
Druhou šablonou je ta, ve které je uložený layout. Tato šablona je často společná pro několik různých akcí, dokonce napříč několika presentery. Této šabloně říkáme, jak nám již nadpis napovídá, "šablona layoutu".

Šablona layoutu je opět soubor s koncovkou `.phtml`. Tento je uložen opět v adresáři `app/templates/`, ale tentokrát není v žádném podadresáři, neboť *šablona layoutu něpatří k žádnému konkrétnímu presenteru*.

Výchozí soubor šablony layoutu se jmenuje `layout.phtml` a cesta k němu je `app/templates/layout.phtml`.

Tento soubor ale ještě ve své distribuci nehledejte, protože jsme vám ještě jednu věc zatajili. Název souborů layoutu vždy začíná znakem zavináče ("@"). Správný název je tedy: `@layout.phtml` a soubor se nachází na cestě `app/templates/@layout.phtml`.

.[note]
Ten znak zavináče ("@") na začátku souborů šablon layoutů má své opodstatnění. Tím, že napíšeme před název šablony znak zavináče ("@"), znemožníme použití šablony layoutu jako šablony akce. Přesněji, přítomnost znaku zavináče znemožní použití názvu šablony v url, což je zcela nutné pro šablony akcí. Proto jeho uvedením dosáhneme výše popsaného efektu.

.[note]
V aplikaci může být layoutů i více. Dokonce tomu tak často bývá, nejrozšířenější schéma je jeden layout pro frontend (zobrazení pro klienta), druhý pro backend (zobrazení pro administraci).

.[tip]
Soubor `app/templates/@layout.phtml` je v Nette Frameworku nastaven jako výchozí a pokud nám nevadí jej používat, nemusíme nikde nic nastavovat a Nette Framework tento soubor automaticky nalezne a použije v případě jeho existence.

Když už víme jak funguje ono dvoufázové renderování šablon, pojď si nějakou tu šablonu vytvořit. Začneme šablonou layoutu.

Vytvoření šablony layoutu
=========================
Vytvoření šablony layoutu je úkol velmi jendoduchý, neboť díky skeletonu na nás z distribuce jeden takový layout už kouká. Pojďme si prohlédnout obsah souboru `app/templates/@layout.phtml`:

/--code php
{**
 * My Application layout template.
 *
 * @copyright  Copyright (c) 2010 John Doe
 * @package    MyApplication
 *
 * @param string   $basePath web base path
 * @param string   $robots   tell robots how to index the content of a page (optinal)
 * @param array    $flashes  flash messages
 *}

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

	<meta name="description" content="Nette Framework web application skeleton">
	<meta name="robots" content="{$robots}" n:ifset="$robots">

	<title>Nette Application Skeleton</title>

	<link rel="stylesheet" media="screen,projection,tv" href="{$basePath}/css/screen.css" type="text/css">
	<link rel="stylesheet" media="print" href="{$basePath}/css/print.css" type="text/css">
	<link rel="shortcut icon" href="{$basePath}/favicon.ico" type="image/x-icon">
</head>

<body>
	{foreach $flashes as $flash}<div class="flash {$flash->type}">{$flash->message}</div>{/foreach}

	{include #content}
</body>
</html>
\--

Jak je vidět z výpisu výše, v souboru šablony layoutu je HTML kód, a pak nějaké divné značky, které těm z vás, kteří mají zkušenosti z jinými šablonovacími systémy pro PHP, mohou lecos připomínat (pokud znáte Smarty můžete pozorovat jistou podobnost).

Pro nás ostatní prozradím dopředu, že ty divné "tagy", či spíše příkazy obklopené složenými závorkami (tedy znaky "{" a "}") jsou skutečně příkazy pro šablonovací systém Nette Frameworku. Ale o něm až o chloupek níže.

<-- Inza jde na přednášku a pak bude pokračovat, stay tuned... -->

.[caution]
Tato stránka je stále v procesu tvorby, informace od této hlášky dále nejsou relevantní. QuickStart by měl být dokončen do 8. 3. 2010. Pracujeme jak nejrychleji je to možné. Zatím si přečtěte "Seriál o Nette Frameworku na Zdrojáku":http://zdrojak.root.cz/serialy/zaciname-s-nette-framework/.
