Stránkování a routování
***********************
.[note]
Quick start momentálně probíhá bouřlivým vývojem - díl, který si právě prohlížíte, je provizorní a některé části chybí, případně se budou měnit.

.[prefix]
Aplikaci máme funkční, začínáme s vylepšováním. Momentálně čekáme na zastávce "stránkování a routování"!

Stránkování
==========
Implementovat stránkovadlo bude opravdu jednoduché - z Nette Addons si stáhneme vykreslitelnou komponentu s názvem "Visual Paginator":http://addons.nette.org/cs/visualpaginator a začleníme ji do aplikace - ve složce s projektem/libs vytvoříme podsložku Nette.Addons, do kterého budeme umísťovat všechny komponenty z tohoto pomyslného repositáře (každou do své podsložky, tj. VisualPaginator bude v libs/Nette.Addons/VisualPaginator. Pokud jste v předchozím díle dávali pozor, pak jste si stáhli soubor screen.css který obsahuje styl z VisualPaginatoru. Pokud jste pozor nedávali, k předchozímu dílu se vraťte ;).

Ok, VisualPaginator máme stažený a "nainstalovaný", jdeme ho zaintegrovat do projektu. Podobně jako u formuláře si vytvoříme továrničkovou metodu v presenteru Todolist:
/--code php
public function createComponentVp()
{
    return new VisualPaginator;
}
\--

Metodu renderShow upravíme následovně:
/--code php
public function renderShow($showDoneTasks)
{
	$vp = $this['vp']; // zápisem $this['vp'] se najde komponenta s názvem vp a vrátí se v návratové hodnotě
	$paginator = $vp->paginator;
	$paginator->itemsPerPage = 25;
	$paginator->itemCount = $this->model->todoCount();

	$todos = $this->model->findAllTodos($order = array(
		'added' => 'ASC',
	), $where = array(
		'done' => $showDoneTasks ? 'yes' : 'no',
	), $paginator->offset, $paginator->itemsPerPage);

	$this->template->todos = $todos;
	$this->template->showDone = $showDoneTasks;
}
\--
Nyní jsme omezili výběr článků na 25, aby se dalo stránkovat, je potřeba přidat do šablony pohledu show řádek `{widget vp}`, hned za tag `</table>`.

Hotovo!

Routování
=============
Routy zajišťují správný překlad url => presenter ale i obrácenou situaci - generování url. Další z mnoha killer features Nette je možnost psát URL až jako poslední věc v aplikaci. Při použití třídy Route závisí tvar url na tzv. masce - jedná se o první parametr třídy Route. Při návrhu rout se zamyslíme nad tím, kolik máme presenterů, kolik akcí, kolik signálů a kolik proměnných. V našem případě jsou ta čísla 1, 2, 3, 2. V URL tedy vůbec nemusíme řešit volbu presenteru, v masce (první parametr) presenter vůbec nemusí být. Akce máme show a add, ideální by pro akce byly URL ve tvaru / (zobrazení) a /pridat-ukol/. To vyřešíme přes tzv. překladovou masku. Proměnné máme dvě - jedna určuje, jestli se zobrazují dokonené nebo nedokončené úkoly, druhá stránku na případném stránkovadle. Pokud to dáme dohromady, chceme zhruba takovouto strukturu:
- / : presenter => Todolist, action => show, showDoneTasks => FALSE, vp-page => 1
- /strana-x/ : presenter => Todolist, action => show, showDoneTasks => FALSE, vp-page => x
- /pridat-ukol/ : presenter => Todolist, action => add
- /hotove-ukoly/ : presenter => Todolist, action => show, showDoneTasks => TRUE, vp-page => 1
- /hotove-ukoly/strana-x : presenter => Todolist, action => show, showDoneTasks => TRUE, vp-page => x
- /smazat/x : presenter => Todolist, signal => delete
- /zmenit/x : presenter => Todolist, signal => changeState
- /submit/ : presenter => Todolist, signal => todoform-submit

Jak na to? Nejprve začneme s touto routou:
/--code php
$router[] = new Route('', array(
    'presenter' => 'Todolist',
));
\--

Nyní si nastavíme tzv. překladovou tabulku - pro parametr, jehož hodnoty jsou cizojazynčné (typicky akce, signály apod.) poté Nette dle tabulky vyhledá "standardní" verzi, přičemž zachová funkčnost cizojazyčné varianty (redirectem):

před jakékoliv nastavování $router:
/--code php
Route::addStyle('do');
Route::addStyle('showDoneTasks'); // action nepřidáváme, protože action si nette přidává samo
Route::setStyleProperty('action', Route::FILTER_TABLE, array(
    'pridat-ukol' => 'add',
));
Route::setStyleProperty('do', Route::FILTER_TABLE, array(
    'smazat' => 'delete',
    'zmenit' => 'changeState',
    'submit' => 'todoForm-submit'
));
Route::setStyleProperty('showDoneTasks', Route::FILTER_TABLE, array(
    'hotove-ukoly' => 1, // 1 jako TRUE
));
\--
Nyní dopíšeme routy, dle vlastního uvážení, snažíme se o co nejmenší počet:
/--code php
$router[] = new Route('[<action>/]<do smazat|zmenit|submit>/<id>', array(
    'presenter' => 'Todolist',
	'action' => 'show',
    'id' => NULL,
));

$router[] = new Route('<action pridat-ukol>', array(
    'presenter' => 'Todolist',
));

$router[] = new Route('[<showDoneTasks 0|hotove-ukoly>/][strana-<vp-page>]', array(
    'presenter' => 'Todolist',
    'action' => 'show',
    'showDoneTasks' => 0,
    'vp-page' => 1,
));
\--

Co si zapamatovat?
============
- Kam vkládat komponenty z Nette addons
- Jak jednoduše stránkovat s VisualPaginatorem
- ...
