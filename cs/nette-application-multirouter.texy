Nette\Application\MultiRouter
*****************************
.[perex]
Hromadné úložiště pro routy aplikace.

Jelikož Nette narozdíl od jiných frameworků nepojmenovává routy, je zde důmyslný mechanismus, který z jednoho globálního úložiště na routy vybere odpovídající routu (objekty [Route | Nette\Application\Route] a [SimpleRouter | Nette\Application\SimpleRouter]), pro kterou požadavek nejvíce vyhovuje. To, zda-li se vybere úspěšně ta routa, kterou jsme zamýšleli, závisí na našich konkrétních definicích masek rout. Obecně platí pravidlo, že routy deklarujeme postupně od těch nejvíce specifických po ty obecné. Tím se vyhneme případným kolizím.

.[tip]
Kolik regulárů používáš v .htaccess, s tolika routami si vystačíš v Nette!

MultiRouter je v základu potomek objektů z jmenného prostoru *Nette\Collections*, konkrétně objektu [ArrayList | api:Nette\Collections\ArrayList], který je přímým potomkem [Collection | api:Nette\Collections\Collection]. Sám implementuje i rozhraní [IRouter | api:Nette\Application\IRouter] stejně jako [Route | Nette\Application\Route] a [SimpleRouter | Nette\Application\SimpleRouter].

Tato hierarchie poskytuje vlastnosti, díky kterým je routování v Nette čistě a rychle napsáno (rychlost parsování URL je ekvivalentní jako RewriteRules z `.htaccess` souborů), proto nemá cenu například nastavení MultiRouteru kešovat. Naopak - funguje rychleji, než když se načítá z keše! Pokud tedy negenerujete routy z databáze, nemá cenu se keší zabývat.

Na závěr se sluší dodat, že jako vše v Nette je možno napsat vlastní router a implementovat si routovací techniky dle libosti, stačí implementovat daná rozhraní.

Jednoduchá ukázka použití MutliRouteru a tvaru routy:

/--code php
// získáme instanci objektu MultiRouter, který slouží jako úložiště pro routy
$router = Environment::getApplication()->getRouter();

// přidáme routu, objekt Route do MultiRouteru
$router[] = new Route('/clanek/<id>', array(
    'presenter' => 'Article',
    'view' => 'article',
    'lang' => 'cs',
));
\--

Další příklady rout lze nalézt v dokumentacích tříd [Route | Nette\Application\Route] a [SimpleRouter | Nette\Application\SimpleRouter] a na fóru.



Viz také: .[see]
- [MultiRouter | api:Nette\Application\MultiRouter] API reference
- [IRouter | api:Nette\Application\IRouter] API reference
- [Routování]
- [Route | Nette\Application\Route]
- [SimpleRouter | Nette\Application\SimpleRouter]
- [Fórum: Příklady routeru | http://forum.nette.org/cs/654-priklady-routeru]
- [Fórum: Routovací tipy a triky | http://forum.nette.org/cs/1001-routovaci-tipy-a-triky]
