Nette\Templates
****************

Šablony pomáhají oddělit HTML od aplikačního kódu. .[perex]

Třída `Nette\Templates\Template` zapouzdřuje soubor se šablonou:

/--php
$template = new Template;
// nastavíme cestu k šabloně
$template->setFile('template.phtml');
// nastavíme parametry
$template->hello = 'Hello World';
\--

Příklad šablony:

/--code html
<p><?= echo $hello ?></p>
\--


Registrace filtrů:
==============

;
$this->template->registerFilter('TemplateFilters::curlyBrackets');
\---

Nejvhodnější řešení, jak filtr zaregistrovat ve všech presenterech, je vytvořit si vlastní presenter (např. abstract BasePresenter extends Presenter), který bude základem všech dalších presenterů v jedné aplikaci, a filtry zaregistruje ve své metodě `beforeRender()`


Filtr curlyBrackets
============

/--code
{$variable} with escaping
{!$variable} without escaping
{*comment*} will be removed
{=expression} echo with escaping
{!=expression} echo without escaping
{?expression} evaluate PHP statement
{_expression} echo with escaping and translation
{link destination ...} control link
{plink destination ...} presenter link
{ajaxlink destination ...} ajax link
{if ?} ... {elseif ?} ... {else} ... {/if} // or <%else%>, <%/if%>, <%/foreach%> ?
{for ?} ... {/for}
{foreach ?} ... {/foreach}
{include ?}
{snippet ?} ... {/snippet ?} control snippet
{block |texy} ... {/block} texy block
{debugbreak}
\--

Dále řídící struktury:

/--code
{if $hello}
    {$hello}
{elseif $any}
    {$any}
{else}
    none
{/if}

<ul>
{foreach $people as $person}
    <li>{$person}</li>
{/foreach}
</ul>

{include 'subdir/include1.phtml'}
\--

Vlastní filtry curlyBrackets
----------------------------

Třída TemplateFilters definuje jednotlivé typy filtrů ve dvou asociativních polích - `$curlyXlatMask` a `$curlyXlatSimple`. Jsou to statické proměnné a lze k nim přistupovat veřejně.

Pro jednoduché nahrazení `{podpis}` v šabloně přidáte do proměnné **$curlyXlatSimple** další hodnotu.

/--php
// v šabloně {podpis}
TemplateFilters::$curlyXlatSimple["podpis"] = "Já";
// v šabloně {aktualniDatum}
TemplateFilters::$curlyXlatSimple["aktualniDatum"] = "<?php echo date('j. n. Y') ?>";
\--

Pole **$curlyXlatMask** umí navíc použít parametr.
/--php
// v šabloně {icon delete}
TemplateFilters::$curlyXlatMask["icon"] = '<img src="/images/icons/#.png" width="16" height="17" alt="#">';
\--

Filtr netteLinks
================

Umí přeložit adresy odkazů typu `Presenter:view?arg=value` na běžnou adresu.
/--code html
{* v šabloně *}
<a href="nette:Presenter:view?arg=value">Odkaz</a>
\--

Filtr texyElements
==================
Prožene přes [Texy | http://texy.info/] obsahy tagů texy.
/--code html
{* v šabloně *}
<texy>Text **tučně**, [odkaz | www.example.com] atd.</texy>
\--

Aby tento filtr fungoval, musí být inicializovaná statická proměnná `$texy` třídy `TemplateFilters`.
/--php
TemplateFilters::$texy = new Texy;
\--

Template helpery
================

[Ve fóru... | http://forum.nette.org/cs/873-helpery-v-sablonach-a-filtru-curlybrackets]

Do šablon je možné zaregistrovat helpery, tj. pojmenované funkce:

Příklad kódu presenteru:
/--php
$this->template->registerHelper('upper', 'strtoupper');
\--

Příklad šablony:
/--code html
...
<h1><?php echo $template->upper($heading) ?></h>
...
\--

Virtuální metoda upper se mapuje na metodu strtoupper. Jako helper je samozřejmě možné zaregistrovat jakýkoliv callback, nejen název funkce.

Helpery podporuje i filtr curlyBrackets za použití této syntaxe:
/--code html
<h1>{$heading|upper}</h1>
\--

Je možno zřetězit více helperů (resp. modifikátorů):
/--code html
<h1>{$heading|lower|capitalize}</h1>
\--

Vykonají se v pořadí od levého k pravému.

Zachytávání výstupu do proměnné
-------------------------------

Značky `{block}` se nově dají použít pro zachytávání výstupu do proměnné:
/--code html
{block $capture}
<ul>
        <li>Hello World</li>
</ul>
{/block}

<p>Captured: {$capture}</p>
\--

Zachytávání je přitom možné kombinovat i s modifikátory.

.[see]
Viz také:
- [Nette\Templates API reference | api:Nette\Templates]
