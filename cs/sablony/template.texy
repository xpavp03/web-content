Nette\Templates
****************

Šablony pomáhají oddělit HTML od aplikačního kódu. .[perex]

Třída `Nette\Templates\Template` zapouzdřuje soubor se šablonou:

/--php
$template = new Template;
// nastavíme cestu k šabloně
$template->setFile('template.phtml');
// nastavíme parametry
$template->hello = 'Hello World';
\--

Příklad šablony:

/--code html
<p><?php echo $hello ?></p>
\--


Filtry
======

Šablonu je možné předzpracovat pomocí filtrů. Jak zaregistrovat filtr?

/--php
$this->template->registerFilter('CurlyBracketsFilter::invoke');
\---

Přečtěte si [popis standardních filtrů | Template Filters], které najdete přímo v distribuci.

Nejvhodnější řešení, jak filtr zaregistrovat ve všech presenterech, je vytvořit si vlastní presenter (např. abstract BasePresenter extends Presenter), který bude základem všech dalších presenterů v jedné aplikaci, a filtry zaregistruje ve své metodě `beforeRender()`



Helpery
==========

Do šablon je možné zaregistrovat helpery, tj. pojmenované funkce:

Příklad kódu presenteru:
/--php
$this->template->registerHelper('upper', 'strtoupper');
\--

Příklad šablony:
/--code html
...
<h1><?php echo $template->upper($heading) ?></h>
...
\--

Virtuální metoda upper se mapuje na metodu strtoupper. Jako helper je samozřejmě možné zaregistrovat jakýkoliv callback, nejen název funkce.

Přečtěte si [popis standardních helperů | Template Helpers], které najdete přímo v distribuci.


.[see]
Viz také:
- [Nette\Templates API reference | api:Nette\Templates]
