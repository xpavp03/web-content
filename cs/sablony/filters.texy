Template Filters
****************

Filtr CurlyBracketsFilter
============

Zjednodušuje zápis šablon.

| Zápis v curlyBracket | PHP ekvivalent nebo význam
|-----------------------
| `{$variable}` | `<?php echo htmlSpecialChars($variable) ?>`
| `{!$variable}` | `<?php echo $variable ?>`
| `{=expression}` | `<?php echo htmlSpecialChars(expression) ?>`
| `{!=expression}` | `<?php echo expression ?>`
| `{*comment*}` | komentář, bude odstraněn
| `{plink destination ...}` | `<?php htmlSpecialChars($presenter->link(...)) ?>`
| `{link destination ...}` | control link
| `{ajaxlink destination ...}` | ajax link
| `{if ?} ... {/if}` | `<?php if (?): ... endif; ?>`
| `{for ?} ... {/for}` | `<?php for (?): ... endfor; ?>`
| `{foreach ?} ... {/foreach}` | `<?php foreach (?): ... endforeach; ?>`
| `{include 'subdir/include1.phtml'}` | `<?php include 'subdir/include1.phtml' ?>`
| `{?expression}` | evaluate PHP statement
| `{_expression}` | echo with escaping and translation
| `{snippet ?} ... {/snippet ?}` | control snippet
| <code>{block \|texy} ... {/block}</code> | texy block
| `{contentType ?}` | inserts HTTP header Content-Type
| `{debugbreak}` | vloží breakpoint, funguje ale jen v některých IDE, např. [PhpED | http://www.nusphere.com/products/phped.htm]

Registrace:

/--php
$this->template->registerFilter('CurlyBracketsFilter::invoke');
\--


Zachytávání výstupu do proměnné
-------------------------------

Značky `{block}` se nově dají použít pro zachytávání výstupu do proměnné:
/--code html
{block $capture}
<ul>
        <li>Hello World</li>
</ul>
{/block}

<p>Captured: {$capture}</p>
\--

Zachytávání je přitom možné kombinovat i s modifikátory.


Podpora helperů
----------------

Filtr curlyBrackets podporuje snadné volání helpery za použití této syntaxe:

/--code html
<h1>{$heading|upper}</h1>
\--

Je možno zřetězit více helperů (resp. modifikátorů):

/--code html
<h1>{$heading|lower|capitalize}</h1>
\--

Vykonají se v pořadí od levého k pravému.

Další parametry funkce helperu se zadávají za jménem helperu oddělené dvojtečkami.

/--code html
<a href="...">{$linkText|truncate:20}</a>
\--


Vlastní rozšíření CurlyBracketsFilter
----------------------------

Třída CurlyBracketsFilter definuje jednotlivé záměny ve statickém asociativním poli `$statements`. Rozšířit je lze přidáním nového prvku:

/--php
// v šabloně {podpis}
CurlyBracketsFilter::$statements["podpis"] = "Já";
// v šabloně {aktualniDatum}
CurlyBracketsFilter::$statements["aktualniDatum"] = "<?php echo date('j. n. Y') ?>";
\--


Filtr netteLinks
================

Umí přeložit adresy odkazů typu `Presenter:view?arg=value` na běžnou adresu.

/--code html
{* v šabloně *}
<a href="nette:Presenter:view?arg=value">Odkaz</a>
\--

Registrace:

/--php
$this->template->registerFilter('TemplateFilters::netteLinks');
\--


Filtr texyElements
==================

Dovolí používat speciální `<texy>` značky.

/--code html
{* v šabloně *}
<texy>Text **tučně**, [odkaz | www.example.com] atd.</texy>
\--

Aby tento filtr fungoval, musí být inicializovaná statická proměnná `$texy` třídy `TemplateFilters`.

/--php
TemplateFilters::$texy = new Texy;
\--

*(poznámka: způsob registrace bude zřejmě změněn)*

Registrace:

/--php
$this->template->registerFilter('TemplateFilters::texyElements');
\--


Filtr phpRemove
==================

Odstraní ze šablony veškerý PHP kód.

/--code html
{* v šabloně *}
Hello <?php nebezpecnaFunkce() ?> World
\--

Registrace:

/--php
$this->template->registerFilter('TemplateFilters::phpRemove');
\--


.[see]
Viz také:
- [Nette\Templates\TemplateFilters API reference | api:Nette\Templates\TemplateFilters]
- [Nette\Templates\CurlyBracketsFilter API reference | api:Nette\Templates\CurlyBracketsFilter]
