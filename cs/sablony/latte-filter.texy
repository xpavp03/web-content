Latte filter
************

.[perex]
Latte filter slouží nejen pro **usnadnění zápisu** šablon, ale také umožňuje pracovat s **bloky** a podporuje **kontextově sensitivní escapování**.

.[caution]
Ve verzi 0.9.0 se tento filtr jmenuje CurlyBrackets!

Registrace
==========
Ve vykreslitelných komponentách se filtr registruje automaticky. Jinde je potřeba jej zaregistrovat stejně jako každý jiný filtr.

/--php
$template->registerFilter(new LatteFilter);
\--


Základní makra
==============

| Zápis v Latte                            | PHP ekvivalent nebo význam
|------------------------------------------------------------------------------------------------
| `{$variable}`                            | Vypíše kontextově escapovanou proměnnou.
| `{!$variable}`                           | Vypíše proměnnou bez escapování.
| `{*text komentáře*}`                     | Komentář, bude odstraněn
| `{plink ...}`                            | Vypíše kontextově escapovaný odkaz.
| `{link ...}`                             | Odkaz nad komponentou (v šabloně presenteru ekvivalentní s makrem `plink`)
| `{if ?} ... {elseif ?} ... {/if}`        | `<?php if (?): ?> ... <?php elseif (?): ?> ... <?php endif ?>`
| `{foreach ?} ... {/foreach}`             | `<?php foreach (?): ?> ... <?php endforeach ?>`
| `{for ?} ... {/for}`                     | `<?php for (?): ?> ... <?php endfor ?>`
| `{while ?} ... {/while}`                 | `<?php while (?): ?> ... <?php endwhile ?>`
| `{include dir/file.phtml}`               | Vloží podšablonu
| `{var foo => value}`                     | Deklaruje proměnnou v šabloně
| `{default foo => value}`                 | Výchozí hodnoty proměnných šablony
| `{control loginForm}`                    | Vykreslí komponentu s daným názvem
| `{dump $variable}`                       | Pošle dump proměnné do `DebugBaru`



Výpis proměnných
----------------

Všechny proměnné jsou vypisovány escapované.

/--html
Jméno: {$name}<br>
Příjmení: {$surname}<br>
Věk: {$age}
\--

Pokud z nějakého důvodu potřebujeme escapování vypnout, tak před dolar vložíme vykřičník.


/--html
<h1>{$title}</h1> {* Escapovaný titulek *}
{!$content}       {* Neescapovaný obsah stránky *}
\--


Přizpůsobení escapování podle lokálního typu obsahu
---------------------------------------------------
Velmi důležitou vlastností je přizpůsobení escapování podle lokálního typu obsahu (tzv. kontextově senzitivní escapování).
Uvnitř JavaScriptu nebo uvnitř CSS se escapuje jinak, než v HTML kódu.
Díky tomu je možné zcela nativně používat PHP proměnné uvnitř JavaScriptového kódu.

Příklad:
/--php
$template->pole = array(1, 2, 3);
$template->name = "Jim Beam";
\--

/--code html
<script type="text/javascript">
    var pole = {$pole};
    var name = {$name}; // ALE POZOR - NESMÍ se už používat extra uvozovky
    var anotherName = "{$name}";  // CHYBA, vygeneruje anotherName = ""Jim Beam"";
</script>
\--

Vložíme-li proměnnou v šabloně do html, css nebo javascriptu, vždy se správně escapuje (`$id` je nějaký identifikátor obsahující libovolné znaky):

/--code html
<style type="text/css">
    #{$id} { background: blue; }
</style>

<script type="text/javascript">
    document.getElementById({$id}).style.backgroundColor = 'red';
</script>

<p id="{$id}">Hello!</p>
\--


Vkládání odkazů `{plink ...}` .[#toc-plink]
--------------------

Značka `{plink}` je zkratkou pro `$presenter->link` a slouží tedy pro generování odkazu na danou akci daného presenteru s danými parametry, resp. na daný signál. Pro zápis cesty se používá stejná syntaxe jako při [/generování odkazů] v presenteru.

/--code html
{* Vygeneruje relativní cestu na `ProductsPresenter` a na akci detail *}
{plink Products:detail, id => $productId}

{* Pokud je v metodě `renderDetail` definován parametr `$id`, tak lze jeho jméno při tvorbě odkazu vynechat *}
{plink Products:detail, $productId}

{* Pokud se aktuálním presenterem právě `ProductsPresenter`, tak lze vynechat i jeho jméno *}
{plink detail, $productId}
\--


Vkládání odkazů `{link ...}` .[#toc-link]
-------------------
Funguje podobně jako `{plink}`, ale generuje odkazy nad aktuální komponentou (jedná se o zkratku pro `$control->link`).


Podmínky `{if ?} ... {/if}` .[#toc-if]
---------------------------
Pro podmíněné vykreslování určitých částí šablon lze použít podmínky ve tvaru `{if ?} ... {elseif ?} ... {else} ... {/if}`.

/--html
{if $isLoggedIn}<a href="...">Odhlásit se</a>{else}<a href="...">Přihlásit se</a>{/if}
\--

Lze použít i speciální konstrukci `{ifset $var} ... {elseifset $var2} ... {/if}`, která nahrazuje zápis `{if isset($var)} ... {elseif isset($var2)} ... {/if}`.

Uvnitř cyklu lze používat makra `{continueIf ?}` a `{breakIf ?}`.


Foreach cyklus .[#toc-foreach]
--------------

Foreach cyklus se chová jako běžný `foreach` v php s několika rozšířeními.

Uvnitř cyklu je inicializovaná proměnná `$iterator`, díky které můžete zjistit některé jinak těžko zjistitelné údaje o právě probíhajícím cyklu.

Metody proměnné `$iterator`:
- `isFirst()` - prochází se cyklem poprvé?
- `isLast()` - jde o poslední průchod?
- `getCounter()` - čítač průchodů cyklem počítaný od jedničky
- `isOdd()` - jde o lichý průchod?
- `isEven()` - jde o sudý průchod?

Příklad:

/--code html
{foreach $rows as $row}
        {if $iterator->isFirst()}
        <table>
        {/if}
        <tr id="row-{$iterator->getCounter()}">
                <td>{$row->name}</td>
                <td>{$row->email}</td>
        </tr>
        {if $iterator->isLast()}
        </table>
        {/if}
{/foreach}
\--


Vkládání souborů
----------------

Vkládání souborů se provádí makrem `{include file.phtml}`. Vložený soubor má k dispozici globální proměnné aktuální šablony (`$template->getParams()`) a parametry, které mu při volání předáme.

/--html
{include userProfile.phtml, id => 12, name => 'John Smith'}
\--

.[note]
Makro `{include}` se kromě vkládání souborů používá i pro [vkládání bloků | Latte filter/Dědičnost#Vkládání].

Deklarace proměnných
--------------------
Někdy může být vhodné deklarovat proměnnou až v šabloně. Pro tyto účely se používá makro `{var}` (existuje alias `{assign}`) za použití následující syntaxe:

/--html
{var name => 'John Smith'}
{var age => 27}

{* Vícenásobná deklarace *}
{var name => 'John Smith', age => 27}
\--

V případě, že chceme deklarovat promměnou pouze v případě, že dosud deklarovaná není, tak použijeme makro `{default}`.

/--html
{default page => 1} {* Lze zapsat také jako {if !isset($page)}{var page => 1}{/if} *}
\--

Vykreslování komponent `{control ...}` .[#toc-control]
--------------------

.[note]
Ke značce `{control}` existuje i alias `{widget}`.

Značka `{control}` slouží pro snadné vykreslování komponent. Pro lepší pochopení je dobré vědět, jak se tato značka přeloží do PHP.

/--html
{control cartControl}		pro celý košík na stránce
{control cartControl:small}	pro malý náhledový košík
\--

se přeloží jako:

/--php
$control->getWidget("cartControl")->render();
$control->getWidget("cartControl")->renderSmall();
\--

Metoda `getWidget()` vrací komponentu `cartControl` a nad touto komponentou volá metodu `render()`, resp. `renderSmall()` pokud je jiný způsob renderování uveden ve značce za dvojtečkou.


Lze použít i volání s parametry, které se předají render metodám, například:

/--html
{control cartControl:small, $maxItems}
\--

se přeloží jako:

/--php
$control->getWidget("cartControl")->renderSmall($maxItems);
\--

Dumpování proměnných `{dump}` .[#toc-dump]
-----------------------------

/--html
{dump $name} {* Vypíše proměnnou $name *}

{dump}       {* Vypíše všechny aktuálně definované proměnné}
\--

Alternativní zápis pomocí n:atributů
====================================
Párová makra lze zapisovat také alternativní syntaxí pomocí tzv. n:atributů.

<table>
<tr>
  <th>Zápis pomocí n:atributů</td>
  <th>Standardní zápis</td>
</tr>

<tr>
<td valign=="top">
/--html
<div class="login" n:if="$cond">
        <p>User {$name}</p>
        ...
</div>
\--
</td>

<td valign=="top">
/--html
{if $cond}
<div class="login">
        <p>User {$name}</p>
        ...
</div>
{/if}
\--
</td>
</tr>


<tr>
<td valign=="top">
/--html
<ul>
	<li n:foreach="$items as $item">{$item}</li>
</ul>
\--
</td>

<td valign=="top">
/--html
<ul>
{foreach $items as $item}
	<li>{$item}</li>
{/foreach}
</ul>
\--
</td>
</tr>


<tr>
<td valign=="top">
/--html
<p><strong n:tag-if="$strong">...</strong></p>
\--
</td>

<td valign=="top">
/--html
<p>{if $strong}<strong>{/if}...{if $strong}</strong>{/if}</p>
\--
</td>
</tr>

<tr>
<td valign=="top">
/--html
<ul n:inner-foreach="$items as $item">
        <li>A {$item}</li>
        <li>B {$item}</li>
</ul>
\--
</td>

<td valign=="top">
/--html
<ul>
{foreach $items as $item}
        <li>A {$item}</li>
        <li>B {$item}</li>
{/foreach}
</ul>
\--
</td>
</tr>


</table>


Podpora helperů
===============

Latte filter podporuje snadné volání [helperů | Template#Helpery] za použití této syntaxe:

/--code html
<h1>{$heading|upper}</h1>
\--

Je možno zřetězit více helperů (resp. modifikátorů):

/--code html
<h1>{$heading|lower|capitalize}</h1>
\--

Vykonají se v pořadí od levého k pravému.

Další parametry funkce helperu se zadávají za jménem helperu oddělené dvojtečkami.

/--code html
<a href="...">{$linkText|truncate:20}</a>
\--


Kam dále?
=========

.[navig]
1. [Latte filter/Pokročilá makra]
2. [Latte filter/Dědičnost]
3. [Latte filter/Snippety]
4. [Latte filter/Vlastní makra]
