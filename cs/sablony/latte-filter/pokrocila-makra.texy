Pokročilá makra
***************

| Zápis v Latte                            | PHP ekvivalent nebo stručný význam
|------------------------------------------------------------------------------------------------
| `{=expression}`                          | `<?php echo htmlSpecialChars(expression) ?>`
| `{!=expression}`                         | `<?php echo expression ?>`
| `{?expression}`                          | vyhodnotí PHP kód
| "`{_expression}`":[#toc-preklady]        | vypíše překlad s escapováním
| `{!_expression}`                         | vypíše překlad bez escapování
| "`{ifCurrent}`":[#toc-znacka-ifcurrent]  | speciální případ `{if}` pro aktivní odkaz
| `{include 'dir/file.phtml'}`             | vloží podšablonu
| "`{cache ?} ... {/cache}`":[#toc-znacky-cache-cache]      | cachovaný blok
| "`{snippet ?} ... {/snippet}`":[#toc-znacka-snippet]| control snippet
| `{attr ?}`                               | usnadňuje zápis atributů html značek
| "`{capture $var} ... {/capture}`":[#toc-zachytavani-vystupu-do-promenne] | zachytnutí bloku do proměnné
| `{block` \|`texy} ... {/block}`          | texy block
| "`{widget ...}`":[#toc-znacka-widget]    | připraví komponentu k vykreslení
| `{control ...}`                          | alias pro widget
| `{contentType ?}`                        | pošle HTTP hlavičku Content-Type
| `{debugbreak}`                           | vloží breakpoint, funguje ale jen v některých IDE, např. [PhpED | http://www.nusphere.com/products/phped.htm]


.[#preklady]
`{_expression}` a `{_!expression}`
---------------------------------
Tyto značky umožňují překládání v šablonách. Pro jejich správnou funkčnost musí být nastaven překladač:
/--php
$template->setTraslator(new MyTranslator);
\--
Překladač musí implementovat rozhraní [api:Nette\Translator].


.[#capture]
Zachytávání výstupu do proměnné
-------------------------------

Značky `{capture}` se používají pro zachytávání výstupu do proměnné:
/--code html
{capture $var}
<ul>
        <li>Hello World</li>
</ul>
{/capture}

<p>Captured: {$var}</p>
\--

Zachytávání je přitom možné kombinovat i s modifikátory.



.[#block-texy]
Značka {block|texy}
------------------
Tam kde není vhodné použít filtr `texyElements`, například při kombinaci s filtrem `Latte`, kde by docházelo ke kolizím, můžete zkusit použít kombinace bloku a helperu.

/--php
$texy = new Texy();
// ...a jeho konfigurace

$template->registerFilter(new Nette\Templates\LatteFilter);
$template->registerHelper('texy', array($texy, 'process'));
\--

šablona:

/--code html
{block|texy}
Vítejte!
--------

Můžete používat syntax Texy!, pokud Vám vyhovuje:
- třeba **tučné** písmo nebo *kurzíva*
- a takto se dělá [odkaz | http://texy.info]

[* image.jpg *]
{/block}
\--

Označný blok s modifikátorem `texy` je pak předhozen helperu `texy`.

Pro pochopení: `{block} ... {/block}` vygeneruje něco cca takového:

/--php
<?php ob_start() ?>
Vítejte!
--------

Můžete používat syntax Texy!, pokud Vám vyhovuje:
- třeba **tučné** písmo nebo *kurzíva*
- a takto se dělá [odkaz | http://texy.info]

[* image.jpg *]
<?php echo $template->texy(ob_get_clean()) ?>
\---

A `$template->texy(...)` je volání helperu `texy`, tj. volání callbacku `array($texy, 'process')`.

Alternativní je předat do šablony proměnnou s texy obsahem a ten pak pomocí helperu převést.

šablona:
/--code html
<div>{!foo->info |texy}</div>
\--


Spolupráce s třídou Html
---------------
Filtr Latte řadu věcí zjednodušuje tak, že použití [Nette\Web\Html] dokáže zpříjemnit i například zapisování atributů. Klasickým zápisem to není úplně ono:

/--php
<a href="xxx"{if $level==0} class="top"{/if}{if $color || $background} style="{if $color}color:{$color};{/if}{if $background}background:{$background}{/if}"{/if}>
\--

Pomocí provázání filtru s třído Html lze dosáhout stejného výsledku jako v předchozím případě tímto způsobem (výsledek je ekvivalentní, tato funkce je ale zatím experimentální):


/--php
<a href="xxx" {attr class('top', $level==0) style('color', $color) style('background', $background)}>
\--

Což se vlastně přeloží jako

/--php
echo Html::el()->class('top', $level==0)->style('color', $color)->style('background', $background);
\--


.[#snippet]
Značka {snippet}
---------------
Snippety se používají při práci s Ajaxem pro označení logické oblasti na stránce, která má být jako celek v případě Ajaxového požadavku překreslena. Značky a `{snippet}` používají ve své vnitřní implementaci [SnippetHelper | api:Nette\Templates\SnippetHelper], který zjednodušuje práci s Ajaxem na nutné minimum. Celá tato problematika včetně příkladů použití je probrána na stránce [Ajax & snippety].


.[#cache]
Značky {cache} … {/cache}
--------------

/--comment
http://forum.nette.org/cs/viewtopic.php?pid=4994#p4994
\--

Pomocí značek `{cache}` a `{/cache}` lze označit části šablony, které se mají ukládat do cache. Kešování je tak možno velmi snadno doplnit i do vykreslovací části aplikace. Vnitřní implementace značky využívá [CachingHelperu | api:Nette\Templates\CachingHelper].

.[note]
Funkce je zatím experimentální.

Označené části se automaticky invalidují, když se změní šablona a to včetně i všech případných inkludovaných souborů.

Dále je podporováno vnořování značek `{cache}`. Části šablony se pak invalidují, když se invaliduje kterákoliv vnořená část.

Jako parametry je možné uvést invalidační tagy (více v [dokumentaci kešování | Nette\Caching]):
/--code html
{cache "item/$id", "comments"}
        <h1>{$title}</h1>

        {include 'spot.phtml'}
        {include 'comments.phtml'}
{/cache}
\--

Pokud šabloně předáme vazbu na model, který data vrací až "on demand" nebo-li "lazy" způsobem, tak je kešování naopak velmi efektivní a tato funkčnost přesouvá kešování tam, kde je potřeba, tedy do šablon.


.[#ifCurrent]
Značka {ifCurrent}
--------------
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=5012#p5012
\--

Značka `{ifCurrent destination}` pomáhá zjistit, zda-li je cíl odkazu shodný s aktuální stránkou. Pokud odkaz směřuje na stránku, která je zrovna zobrazena, můžeme ho například jinak nastylovat a podobně.
Trik je v tom, že při generování odkazu se detekuje, jestli odkaz míří na aktuální stránku. Výsledek pak vrátí `$presenter->getCreatedRequest()->hasFlag('current')`.

/--code html
<!-- příklady použití -->
<a href="{link edit, 10}">edituj</a>
<ul class="menu">
	<li><a href="{link Default:default}">...</a></li>
	<li><a href="{link}">...</a></li>
	...
	<li {ifCurrent Default:default}class="current"{/if}><a href="{link Default:default}">...</a></li>

	<!-- rozšíření scope -->
	<li {ifCurrent Default:*}class="current"{/if}><a href="{link Default:default}">...</a></li>
</ul>
<!-- znegování -->
{ifCurrent Admin:login}{else}<a href="{link Admin:login}">Přihlašte se!</a>{/if}
\--


Použití znaku @ před značkami
=========
http://forum.nette.org/cs/2451-zavinacova-magie-v-praxi

Grid rendering a pravidelné operace při iteraci
========
http://forum.nette.org/cs/3205-2009-12-22-novinka-grid-rendering

.[see]
Viz také:
- [Nette\Templates\TemplateFilters API reference | api:Nette\Templates\TemplateFilters]
- [Nette\Templates\LatteFilter API reference | api:Nette\Templates\LatteFilter]
