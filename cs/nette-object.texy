Nette\Object
*************

Nette\Object je společným předkem všech tříd Nette Frameworku. V jiných programovacích jazycích takové třídy existují automaticky (v Pascalu `TObject`, DOT.NET má `System.Object` a Java nebo Ruby mají `Object`), ale v PHP nic takového neexistuje. Jde o třídu dostatečně transparentní, neměla by způsobovat žádné kolize, proto ji můžete jako základní třídu pro své třídy používat i vy.

/--php
class MyClass extends Object
{

}

$obj = new MyClass;
echo $obj->getClass();
\--

Reflexe
=======

Základní třída obvykle deklaruje metody pro sebereflexi. Například metodu vracející název třídy:

/--php
$object = new ClassName;
$className = $object->getClass(); //pro verzi 0.9
$className = $object->getReflection()->getName(); //pro verzi 1.0
\--

V PHP je sice možné volat `get_class($object)`, to ale není tak *hezké*.

Dále existuje metoda vracející `ReflectionObject` pro podrobnější reflexi:

/--php
$reflection = $object->getReflection();
$reflection->hasMethod('test');
\--

Náprava nekonzistentního generování chyb
========================================

PHP reaguje na přístup k nedeklarovaným členům značně nekonzistentně:

/--php
$obj->undeclared = 1; // projde bez hlášení
echo $obj->undeclared2; // generuje Notice
MyClass::$undeclared = 1; // generuje Fatal error
$obj->undeclared(); // generuje Fatal error
\--

Většinou se přitom jedná o překlepy, které bývají zdrojem obtížně nalezitelných chyb.

Objekty tříd, které jsou potomky `Nette\Object`, vždy při přístupu k nedeklarovanému členu vyhazují výjimku `MemberAccessException`.

Gettery a settery
=================

Termínem "property .(česky vlastnost)" se označují [speciální  členy tříd | http://en.wikipedia.org/wiki/Property_(programming)], které umožňují pracovat s metodami tak, jako by to  byly proměnné. U `Nette\Object`u se jedná o gettery a settery. Zvenku vypadají jako obyčejná proměnná, ale přístup k ní máme plně pod kontrolou. Můžeme tak validovat vstupy nebo generovat výstupy až v případě potřeby.

- Getter i setter musí být **veřejná metoda**.
- Getter je povinný, setter volitelný (v tom případě pak získáme **read-only** proměnnou, write-only proměnné nejsou podporovány).
- Názvy jsou **citlivé na velikost písmen** (case-sensitive). První písmeno property může být malé i velké, mělo by to ale být anglické písmeno případně podtržítko.

/--php
class Circle extends Object
{
    private $radius;

    public function getRadius()
    {
        return $this->radius;
    }

    public function setRadius($radius)
    {
        // hodnotu před uložením validujeme
        $this->radius = max(0, (float) $radius);
    }

    public function getArea()
    {
        return $this->radius * $this->radius * M_PI;
    }
}

$circle = new Circle;
$circle->radius = 12; // volání $circle->setRadius(12);
echo "Radius: " . $circle->radius; // volání $circle->getRadius();
echo "Area: " . $circle->area;
\--

Kromě toho, přidáme-li kruhu property vyplněn/nevyplněn, přirozenější než `$circle->getFilled()` je volání `$circle->isFilled()`. I proto akceptuje Nette obě formy, přičemž pokud existuje `getFilled()`, zavolá se ona -- má přednost.

/--php
class FillableCircle extends Circle
{
    private $filled;

    public function isFilled()
    {
        return $this->filled;
    }

    public function setFilled($filled)
    {
        // opět validace
        $this->filled = (bool) $filled;
    }
}

$circle = new FillableCircle;
$circle->filled = TRUE; // volání $circle->setFilled(TRUE);
echo "Filled: " . $circle->filled; // volání $circle->isFilled();
\--

Jedná se jen o "syntaktické pozlátko"((syntactic sugar)), jehož významem je pouhé zpřehlednění kódu. Pokud nechcete, tak properties nemusíte používat.

Události
========

Pokud potřebuji volat v nějakém okamžiku více funkcí se stejnými parametry, mohou se mi hodit události (events).

/--php
class Zahrada extends Object
{
	// deklarace ve třídě
	public $onSound;
}

function kocka($zvuk)
{
	echo $zvuk === "haf" ? "lek" : "";
}

function pes($zvuk)
{
	echo $zvuk === "mňau" || $zvuk === "haf" ? "haf" : "";
}

$zahrada = new Zahrada;

// nastavím handlery
$zahrada->onSound[] = "kocka";
$zahrada->onSound[] = "pes";

$zahrada->onSound("haf"); // vypíše lekhaf
\--

Rozšiřovací metody
==================

Pokud chcete do nějaké třídy dopsat metodu a z nějakého důvodu to nemůžete realizovat poděděním, tak můžete použít extension method.


/-- code php
class MyClass extends Object
{
    public $a;
    public $b;
}

// deklarace budoucí metody MyClass::join()
function MyClass_join(MyClass $_this, $separator)
{
    return $_this->a . $separator . $_this->b;
}

MyClass::extensionMethod('MyClass::join', 'MyClass_join'); // v PHP 5.2
MyClass::extensionMethod('join', 'MyClass_join'); // v PHP 5.3

$obj = new MyClass;
echo $obj->join(' ');
\--

.[see]
Viz také:
- [Nette\Object API reference | api:Nette\Object]
