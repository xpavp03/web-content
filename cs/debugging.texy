Debugování a zpracování chyb
****************************


Knihovna Nette\Diagnostics\Debugger (NDebugger v PHP 5.2), která zdomácněla pod jménem *Laděnka*, je užitečnou každodenní pomocnicí PHP programátora. .[perex]

PHP je jazyk na sekání těžko odhalitelných chyb jako stvořený, neboť dává vývojářům značnou volnost. O to je cennější ladící nástroj Nette\Diagnostics\Debugger. Mezi diagnostickými nástroji pro PHP představuje naprostou špičku. Pojďte se podívat, co vše umí.


Vizualizace chyb a výjimek
--------------------------

Jak PHP oznamuje chyby sami jistě dobře víte. Přímo do zdrojového kódu stránky vypíše v případě chyby něco takového:

/--pre .{font-size: 90%}
<b>Parse error</b>:  syntax error, unexpected T_STRING in <b>DashboardPresenter.php</b> on line <b>8</b>
\--

nebo při nezachycené výjimce:

/--pre .{font-size: 90%}
<b>Fatal error</b>:  Uncaught exception 'MemberAccessException' with message 'Call to undefined method Nette\Web\User::isLogedIn().' in D:\Web\Nette.web\libs\Nette\ObjectMixin.php:69
Stack trace:
#0 D:\Web\Nette.web\libs\Nette\Object.php(80): ObjectMixin::call(Object(User), 'isLogedIn', Array)
#1 [internal function]: Object-&gt;__call('isLogedIn', Array)
#2 D:\Web\cd-collection\app\presenters\DashboardPresenter.php(12): User-&gt;isLogedIn()
#3 D:\Web\Nette.web\libs\Nette\Application\Presenter.php(154): DashboardPresenter-&gt;startup()
#4 D:\Web\Nette.web\libs\Nette\Application\Application.php(148): Presenter-&gt;run(Object(PresenterRequest))
#5 D:\Web\cd-collection\app\bootstrap.php(54): Application-&gt;run()
#6 D:\Web\cd-collection\index.php(13): require('D:\Web\cd-colle...')
#7 {main}
  thrown in <b>D:\Web\Nette.web\libs\Nette\ObjectMixin.php</b> on line <b>69</b>
\--


Pravda, všechny důležité informace tam jsou, ale kdo se v tom má orientovat ? Pozveme si tedy Laděnku, ať nám chybu ukáže po svém. Stačí do kódu, nejlépe hned za načtením frameworku přidat řádek:

/--php
require 'Nette/loader.php';

Nette\Diagnostics\Debugger::enable(); // aktivujeme Laděnku
\--

a najednou se chyba nebo výjimka zobrazí dočista v jiné podobě:


[* exception-ndebug.gif *]:http://nette.org/examples/ndebug/exception.html *** *Nezachycená výjimka v provedení `Nette\Diagnostics\Debugger`*


To je ovšem jiné kafé, že? Chybová zpráva doslova křičí, vidíte část zdrojového kódu se zvýrazněným řádkem, kde k chybě došlo, informace *Call to undefined method Nette\Web\User::isLogedIn()* srozumitelně vysvětluje, o jakou chybu jde. Celá stránka je navíc živá, můžete se proklikávat k větším podrobnostem. "Zkuste si to":http://examples.nette.org/ndebug/nette-exception.html.

[* debug-dump-collapse-1-.png *]


Jak vidíte, Laděnka je poměrně výřečná, což lze ocenit ve vývojovém prostředí, zatímco na produkčním serveru by to způsobilo hotové neštěstí. Tam se totiž žádné ladící informace vypsat nesmí. Laděnka proto disponuje autodetekcí prostředí a pokud příklad spustíte na ostrém serveru, chyba se místo zobrazení zaloguje a návštěvník uvidí jen uživatelsky srozumitelnou hlášku:

[* nette-107.png *]


U vizualizace a logování chyby ovšem schopnosti Nette\Diagnostics\Debugger zdaleka nekončí.



Chyby úrovní Notice a Warning
-----------------------------

Ukažme si jednoduchý příklad:

/--php
if (getenv('REMOTE_ADDR') === '192.168.0.5') {
	define('DEBUG', TRUE); // konstantu nastavíme pouze této IP adrese
}

// ...

if (DEBUG) {
	echo 'ladící informace';
}
\--

Věřili byste, že `ladící informace` se vypíše vždy, nezávisle na první podmínce a IP adrese? Pokud nevěříte, zkuste si to. Důvod je ten, že PHP z historických důvodů považuje nedefinovanou konstantu za řetězec, takže podmínka `if (DEBUG)` se vyhodnotí kladně vždy. Naštěstí v tomto případě PHP vygeneruje chybu E_NOTICE.

Abychom podobné chyby odhalili, je nutné bedlivě monitorovat chyby všech úrovní, které PHP generuje, zejména úrovně E_NOTICE.

Laděnka a chyby... V prohlížeči vidíme:

[* nette-202.png *]

Protože nejde o fatální chybu, jakou byla předchozí nezachycená výjimka, nepoužívá se k vizualizaci červená stránka, ale jen textová noticka. Ve složitější grafice je možno takovou chybu snadno přehlédnout, dokonce nemusí být viditelná vůbec (leda pohledem do kódu stránky). Laděnka se potutelně usmívá, protože má šikovné řešení.

/---php
Debugger::$strictMode = TRUE;
\---




Striktní třídy
--------------

Najdete v tomto příkladu chybu?

/--php
class FileManipulator
{
	public $from;
	public $to;

	function copy() {
		return copy($this->from, $this->to);
	}
}

$manipulator = new FileManipulator;
$manipulator->form = 'source.php';
$manipulator->to = 'dest.php';
$manipulator->copy();
\--

Zdá se, že kód by měl zkopírovat soubor `source.php` do `dest.php`, nicméně neudělá to. Jak je to možné? Omylem se místo `$manipulator->from` do kódu dostalo `form`, téměř nepostřehnutelný překlep. Záludnost chyby tkví hlavně v tom, že na ni PHP nijak neupozorní (z hlediska jazyka to není chyba) a stojí hodně námahy ji vypátrat.

Příklad ukazuje, že v některých situacích nestačí ani sledování chyb Warning nebo Notice. Uvedenou chybu by jsme však odhalili, pokud by třída `FileManipulator` byla potomkem třídy [Nette\Object]:

/--php
class FileManipulator extends Nette\Object
{
	...
\--

Zatímco dosud kód tiše (ale chybně) proběhl, teď už je situace jiná:

[* nette-201.png *] *** Laděnka označila místo, kde je překlep.

Třída `Nette\Object` učinila `FileManipulator` striktnějším a na použití nedeklarované proměnné reagoval vyhozením výjimky, kterou `Nette\Diagnostics\Debugger` zobrazil. Řádek s fatálním překlepem je odhalen a označen, textová zpráva situaci popisuje slovy: *Cannot write to an undeclared property FileManipulator::$form* (nelze zapsat do nedeklarované proměnné FileManipulator::$form). Programátor může promptně zareagovat. Chybu, které by si dlouho nemusel ani všimnout a jen za velkého úsilí by ji odhaloval, dostal srozumitelně naservírovanou na červeném podnose.

Takřka všechny třídy Nette Framework jsou potomky třídy Nette\Object, takže vám automaticky nabízejí její vyšší komfort. Více informací o Nette\Object.



Dump proměnných
---------------

Každý ladič je dobrým kamarádem s funkcí [var_dump | php:], která podrobně vypíše obsah proměnné. Bohužel v prostředí HTML výpis pozbude formátování a slije se do jednoho řádku, o sanitizaci HTML kódu ani nemluvě. V praxi je nezbytné `var_dump` nahradit šikovnější funkcí. Tou je právě `Debugger::dump()`

/--php
$arr = array(10, 20.2, TRUE, NULL, 'hello');

Debugger::dump($arr);
// včetně jmenného prostoru Nette\Diagnostics\Debugger::dump($arr);
\--

vygeneruje výstup:

/--html
<pre><span style="color:gray">array</span>(5) {
  [0] => <span style="color:gray">int</span>(10)
  [1] => <span style="color:gray">float</span>(20.2)
  [2] => <span style="color:gray">bool</span>(true)
  [3] => <span style="color:gray">NULL</span>
  [4] => <span style="color:gray">string</span>(5) "hello"
}
</pre>
\--


Měření času
-----------

Dalším užitečným nástrojem ladiče jsou stopky s přesností na mikrosekundy:

/--php
Debugger::timer();

// princi můj malinký spi, ptáčkové sladce již sní...
sleep(2);

$elapsed = Debugger::timer();
// $elapsed ≈ 2
\--

Volitelným parametrem je možno dosáhnout vícenásobných měření.

/--php
Debugger::timer('page-generating');
// nějaký kód
Debugger::timer('rss-generating');

// nějaký kód
$rssElapsed = Debugger::timer('rss-generating');
$pageElapsed = Debugger::timer('page-generating');
\--



/--php
Debugger::timer(); // zapne stopky

... // časově náročná operace

echo Debugger::timer(); // vypíše uplynulý čas v sekundách
\--





Produkční vs. vývojový režim
----------------------------

Jak jste si mohli všimnout, Laděnka umí být poměrně výřečná. Její "červená smrt" zobrazuje úseky kódu, kde se mohou nacházet citlivé informace. To  se nakonec týká všech ladících informacích, které posíláme ven pomocí [Debugger::dump() | #Dump proměnných] nebo [Debugger::fireLog() |#Firebug a FireLogger], a samozřejmě také všech chybových zpráv, které generuje PHP.


Co lze ocenit ve vývojovém prostředí, by způsobilo hotové neštěstí na produkčním serveru. Tam se totiž žádné ladící informace vypsat nesmí. Laděnka se proto umí přepínat mezi produkčním a vývojovým režimem. Vývojový režim jsme používali až dosud a poctivě zobrazoval všechny ladící zprávy. Produkční režim naopak zakáže zobrazování úplně všech zpráv. Pokud jste tedy v kódu zapomněli nějaké `Debugger::dump($obj)`, nemusíte se obávat, na produkčním serveru se nic nevypíše. Nepošlou se ani žádné informace do konzole Firebugu, nezobrazí se ani chybové hlášky PHP. **Ty se naopak začnou logovat do souboru.**

K přepínání režimů slouží první parametr metody `Debugger::enable()`, kde lze uvést buď konstantu `Debugger::PRODUCTION` nebo `Debugger::DEVELOPMENT`.

Pokud jej neuvedeme, má výchozí hodnotu `Debugger::DETECT` a v takovém případě se detekuje režim podle IP adresy serveru - je-li dostupný přes veřejnou IP adresu, běží v produkčním režimu, je-li na lokální, tak ve vývojářském. V drtivé většině případů tak není potřeba režim nastavovat a správně se rozezná podle toho, jestli aplikaci spouštíte na svém lokálním serveru nebo v ostrém provozu.




Logování chyb
-------------

V produkčním režimu Laděnka automaticky všechny chyby a zachycené výjimky zaznamenává do textového logu. Pokud neurčíme jinak, půjde o soubor `log/error.log`. Logování chyb je přitom nesmírně užitečné. Představte si, že všichni uživatelé vaší aplikace jsou vlastně betatesteři, kteří zdarma odvádějí špičkovou práci v hledání chyb a vy byste udělal hloupost, kdybyste jejich cenné reporty zahodil bez povšimnutí do odpadkového koše.

Pokud potřebujete zalogovat vlastní zprávu nebo vámi zachycenou výjimku, použijte k tomu metodu `log()`:

/--php
Debugger::log('Doslo k necekane chybe'); // textová zpráva

try {
	kritickaOperace();
} catch (Exception $e) {
	Debugger::log($e); // logovat lze i výjimku
	// nebo Debugger::log($e, Debugger::ERROR) odešle i e-mailovou notifikaci
}
\--

Jiný adresář pro logování chyb lze nastavit druhým parametrem metody enable():

/--php
Debugger::enable(Debugger::DETECT, __DIR__ . '/mylog');
\--

Pro skutečného profíka je error log klíčovým zdrojem informací a chce být ihned informován o každé nové chybě. Laděnka mu v tom vychází vstříc, umí totiž o novém záznamu v logu informovat e-mailem. Kam odesílat emaily určíte proměnnou $email:

/--php
Debugger::$email = 'admin@example.com';
\--

Aby vám však nezaplavila e-mailovou schránku, pošle vždy **pouze jednu zprávu** a vytvoří soubor `email-sent`. Vývojář po přijetí e-mailové notifikace zkontroluje log, opraví aplikaci a smaže monitorovací soubor, čímž se opět aktivuje odesílání e-mailů.





Firebug a FireLogger
--------------------

Ne vždy lze ladící informace posílat do okna prohlížeče. Týká se to AJAXových požadavků, generování XML výstupu či obrázků. V takovým případě můžeme zasílat zprávy samostatným kanálem do Firebugu. Chyby úrovně Notice a Warning jsou do okna Firebugu dokonce zasílány automaticky. Taktéž je možné logovat výjimky, které sice aplikace zachytila, ale stojí za to na ně upozornit.

Jak na to?

1) stáhněte a pusťte si prohlížeč Firefox
2) stáhněte si rozšíření [Firebug | http://www.getfirebug.com]
3) stáhněte si rozšíření [FireLogger | http://firelogger.binaryage.com]
4) restartujte prohlížeč, zapněte zapněte Firebug (klávesou F12) a povolte panely Síť (Net) a Logger


... Otevřete si náš prográmek a klikněte na panel Konzole. Ha! Sem se přesunula chybová hláška.

Protože Nette\Diagnostics\Debugger komunikuje s Firebugem přes HTTP hlavičky, je nutné volat logovací funkce ještě před tím, než PHP skript cokoliv odešle na výstup. Také je možné zapnout [output buffering | http://php.net/manual/en/function.ob-start.php] a tím výstup oddálit.

/--php
use Nette\Diagnostics\Debugger;

Debugger::fireLog('Hello World'); // vypíšeme řetězec do konzoly Firebugu

Debugger::fireLog($_SERVER); // do konzoly lze vypsat i pole nebo objekty

Debugger::fireLog(new Exception('Test Exception')); // či dokonce výjimky
\--

Výsledek vypadá asi takto:

[* firebug-1.png *]
