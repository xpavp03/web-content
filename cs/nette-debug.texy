Nette\Debug
************

Knihovna Nette\Debug, která zdomácněla pod jménem *Laděnka*, je užitečnou každodenní pomocnicí PHP programátora. .[perex]


Zachytávání chyb a výjimek
==================

Zpráva o nezachycené výjimce nebo chybě poskytuje vývojáři důležitou informaci o tom, kde a proč k ní došlo. Standardní výstup v PHP vypadá asi takto:

[* exception-default.gif *]:http://nette.org/examples/ndebug/exception-default.html *** Standardní podoba nezachycené výjimky

Pusťme však ke slovu Laděnku. Po aktivaci příkazem `Debug::enable()` nám předvede svou nejvíce sexy polohu:

[* exception-ndebug.gif *]:http://nette.org/examples/ndebug/exception.html *** Nezachycená výjimka v provedení Nette\Debug

Takto vypadá [výjimka | http://nette.org/examples/ndebug/exception.html], takto vypadá vygenerovaná [chyba | http://nette.org/examples/ndebug/user-error.html]. To je pak jiné ladění, co?



Variable dump
=========

Každý ladič je dobrým kamarádem s funkcí [var_dump | php:], která podrobně vypíše obsah proměnné. Bohužel v prostředí HTML výpis pozbude formátování a slije se do jednoho řádku, o sanitizaci HTML kódu ani nemluvě. V praxi je nezbytné `var_dump` nahradit šikovnější funkcí. Tou je právě `Debug::dump()`

/--php
$arr = array(10, 20.2, TRUE, NULL, 'hello');

Debug::dump($arr);
// včetně jmenného prostoru Nette\Debug::dump($arr);
\--

vygeneruje výstup:

/--html
<pre><span style="color:gray">array</span>(5) {
  [0] => <span style="color:gray">int</span>(10)
  [1] => <span style="color:gray">float</span>(20.2)
  [2] => <span style="color:gray">bool</span>(true)
  [3] => <span style="color:gray">NULL</span>
  [4] => <span style="color:gray">string</span>(5) "hello"
}
</pre>
\--

Měření času
=======

Dalším užitečným nástrojem ladiče jsou stopky s přesností na mikrosekundy:

/--php
Debug::timer();

// princi můj malinký spi, ptáčkové sladce již sní...
sleep(2);

$elapsed = Debug::timer();
// $elapsed ≈ 2
\--


Logování chyb
==========

Vypisování chyb se nesmí nikdy dostat na produkční server. Laděnka je výborná společnice na pracovišti, ale nikdy ji nesmíme brát sebou ven. Je totiž děsně ukecaná a vyzradí na vás úplně všechno (nicméně kdyby k tomu náhodou došlo, má integrovaný systém pro skrytí citlivých políček, např. hesel). Na produkčním serveru je však možné nechat výpisy ukládat do adresáře nebo odesílat administrátorovi emailem. To se zapíná takto:

/--php
Debug::enable(E_ALL, 'php_error.log', 'admin@example.com');
\--

- první parametr určuje úroveň sledovaných chyb
- druhý parametr je jméno error logu (nebo FALSE, pokud se chyby nemají logovat ale zobrazovat, nebo NULL, pokud se použije autodetekce, viz níže)
- třetí parametr je emailová adresa, kam se mají posílat notifikace (nebo pole hlaviček emailu, viz níže).


Laděnka tedy funguje buď v režimu zobrazování nebo logování chyb. To se v podstatě přepíná druhým parametrem. Pokud jej však neuvedeme (nebo má hodnotu NULL), rozhodne se podle prostředí (`Environment::getLive()`) a pokud nejsme ve vývojovém prostředí, zvolí logování do souboru `%logDir%/php_error.log`. (nicméně Nette\Debug lze používat stále samostatně, závislost na třídě Environment je jen volitelná).

Třetí parametr je emailová adresa nebo pole hlaviček, kam bude zasílána notifikace o vzniku chyby (včetně fatálních nezachytitelných chyb). Je to udělané tak, že se pošle jen jeden email, takže nehrozí zaplavení adminovy schránky.

Emailové hlavičky (včetně pseudohlavičky Body) je možné specifikovat takto:

/--php
$emailHeaders = array(
    'From' => 'web@example.com',
    'To'   => 'admin@example.com',
    'Subject' => 'Mas tam chybu voe!',
    'Body' => 'Mrkni na error log na serveru %host%',
);
Debug::enable(E_ALL, NULL, $emailHeaders);
\--


Profiler
=====

Profiler se zapíná

/--php
Debug::enableProfiler();
\--

a vypadá [asi takto | /examples/ndebug/profiler.html]. Má své API (na příkladu vidíte spolupráci s dibi) a podporuje přetahování myší.





Propojení na Firebug
==============

Komunikace Nette\Debug a Firebugu dává vývojářům možnost zasílat zprávy samostatným kanálem, mimo okno prohlížeče. Lze to tedy využít pro zasílání chyb úrovně E_NOTICE a E_WARNING (tohle bude nějak Nette\Debug řešit automaticky). Taktéž je možné logovat výjimky, které sice aplikace zachytila, ale stojí za to na ně upozornit. Firebug konzole se také výborně hodí pro ladění AJAXových aplikací.


1) stáhněte si rozšíření [Firebug | http://www.getfirebug.com/] (to nejspíš už ve Firefoxu máte)
2) stáhněte si rozšíření [FirePHP | https://addons.mozilla.org/en-US/firefox/addon/6149]
3) zapněte si FirePHP v FirePHP menu a aktivujte Firebug Net panel


Protože Nette\Debug komunikuje s Firebugem přes HTTP hlavičky, je nutné volat logovací funkce ještě před tím, než PHP skript cokoliv vypíše. Také je možné zapnout [output buffering | http://php.net/manual/en/function.ob-start.php] a tím výstup oddálit.

/--php
use Nette\Debug;

// vypíšeme řetězec do konzoly Firebugu
Debug::fireLog('Hello World');

// ke zprávám je možné přidat indikátor:
Debug::fireLog('Info message', 'INFO');
Debug::fireLog('Warn message', 'WARN');
Debug::fireLog('Error message', 'ERROR');

// do konzoly lze vypsat i pole nebo objekty:
Debug::fireLog($_SERVER);
\--

Konzola podporuje i speciální typ tabulky:

/--php
Debug::fireLog(
	array('2 SQL queries took 0.06 seconds', // table title
	array(
		array('SQL Statement', 'Time', 'Result'), // table header
		array('SELECT * FROM Foo', '0.02', array('row1', 'row2')), // 1. row
		array('SELECT * FROM Bar', '0.04', array('row1', 'row2'))  // 2. row
	)
), 'TABLE');
\--

Nebo lze do logu poslat výjimku:

/--php
try {
	throw new Exception('Test Exception');
} catch(Exception $e) {
	Debug::fireLog($e);
}
\--

Výsledek vypadá asi takto:

[* firebug-1.png *]


Kromě konzole lze vypisovat proměnné do záložky "Server" pod záložkou "Net". Zde je připraven inspektor, který umí rozbalovat a sbalovat jednotlivé větve proměnné. Každé dumpované proměnné musí být přiřazen jedinečný klíč (druhý parameter):

/--php
$arr = array(10, 20,
	array('key1' => 'val1', 'key2' => TRUE)
);

Debug::fireDump($arr, 'My var');
\--

Což v prohlížeči vypadá takto:

[* firebug-2.png *]


.[see]
Viz také:
- [FirePHP | http://www.firephp.org].
- [Nette\Debug API reference | api:Nette\Debug]
