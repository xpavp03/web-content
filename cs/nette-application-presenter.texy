Nette\Application\Presenter
****************************

*Poznámka: dokumentace Nette\Application\Presenter se stále vyvíjí*

/--comment
http://forum.nette.org/cs/806-presenter
http://forum.nette.org/cs/viewtopic.php?pid=3832#p3832
http://forum.nette.org/cs/826-backlink-mezi-presentery-a-view
http://forum.nette.org/cs/671-jak-na-odkaz-na-jiny-presenter
\--

Životní cyklus presenteru
------------------------
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=4020#p4020
\--

[* http://nette.org/media/lifecycle.gif >] *** Životní cyklus presenteru

Životní cyklus presenteru je rozdělen do několika částí představovaných voláním volitelně existujících metod. Jde o `present{view}`, `prepare{scene}`, `handle{signal}` a `render{scene}`.

Následující obrázek ilustruje, jak jsou postupně vykonávány metody presenteru v jeho životním cyklu.
- **bíle** jsou označeny společné metody pro všechny pohledy
- **žlutě** jsou označeny metody pro konkrétní pohled (nebo scénu)
- **modře** je označena metoda, která má na starosti zpracování konkrétního signálu

Platí tu určitá pravidla: v okamžiku volání `render{scene}` už nemá docházet k žádným změnám parametrů, „vnitřní stav“ je konečný. Protipólem je `present{view}`, kde je prostor pro manipulaci s modelem s možností následného přesměrování.

Tudíž v kterékoliv fázi předcházející `handle{signal}` můžeme vykonat signál manuálně zavoláním metody `$this->processSignal()`.

**Příklad:**

/--php
if ($this->isSignalReceiver($this, 'paging') || $this->isSignalReceiver($this, 'sorting')) {
    $this->processSignal();
}
\--

Tím je signál provedený a už se nebude znovu volat.


Signál aneb subrequest (nebo Handler?)
--------
/--comment
http://forum.nette.org/cs/893-obsluzne-handlery-zo-sticky
\--
Metoda `isSignalReceiver()` ověří, zda je komponenta (první argument) příjemcem signálu (druhý argument). Druhý argument můžeme vynechat – pak zjišťuje, jestli je komponenta příjemcem jakéhokoliv signálu. Experimentálně lze jako druhý parametr uvést `TRUE` a tím ověřit, jestli je příjemcem nejen uvedená komponenta, ale také kterýkoliv její potomek.


Pohled (View) & Šablony (Templates)
------------------------------------
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=3156#p3156
\--
Presenter má během svého životního cyklu možnost kdykoliv ukončit svou činnost, pokud je s prací hotový (`$presenter->terminate()`). To může udělat i během "společných" metod `startup()`, `beforePrepare()`, `beforeRender()`, případně zde může view měnit `changeView(...)`. Pokud se nic takového nestane, pokusí se Nette vykreslit implicitní šablonu, přičemž jméno šablony odvodí od view. Každý presenter může mít vlastní layout uložený v souboru `/templates/Homepage/@layout.phtml` nebo `/templates/Homepage.@layout.phtml`. Nebo se použije společný layout uložený v `/templates/@layout.phtml`.

Změnit layout jde metodou `changeLayout()`, kde parameter `NULL` layout zcela vypne, nebo lze předat název layoutu. Např. `changeLayout('extra')` bude místo souboru `...@layout.phtml` hledat `...@extra.phtml`.

Teprve když by soubor se šablonou neexistoval, vyhodí se výjimka `BadRequestException`.

Tohle chování má výhodu v tom, že pokud přidáváme nové view, stačí přidávat nové šablony do příslušné složky a není potřeba psát žádné (prázdné) metody. A naopak, view jsou na šablonách nezávislé, můžeme je zpracovat dřív, než na kreslení šablony dojde.

Vypnout layout lze přes `$presenter->changeLayout(FALSE)`.


Persistentní parametry
---------------------
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=3886#p3886
http://forum.nette.org/cs/669-jak-na-persistenci

Perzistentní komponenty - http://forum.nette.org/cs/844-persistentni-komponenty-a-dalsi-novinky-v-revizi-71

pozor na kolize se zaplym eAcceleratorem!
\--

Persistentní parameter není potřeba uvádět při volání `link(...)`, neboť se předává automaticky. Ale uvést ho samozřejmě možné je a tak mu změnit hodnotu.

Podmínkou persistence je jeho deklarace jako public a uvedení řetězce `@persistent` v `phpDoc`.

/--php
/** @persistent int */
public $round = 0;
\--


Komponenty
-----------
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=3418#p3418
\--

Svázání komponenty s presenterem umožňuje:
- používat v komponentě persistentní parametry
- používat signály
- volat na komponentě funkce závislé na přítomnosti presenteru (`link`, `redirect`, `endSnippet`)

Pokud nic z toho nepotřebujeme (nebo nechceme), není potřeba komponentu s presenterem vázat (respektive není potřeba ani dědit z `PresenterCom­ponent` nebo `Control`). Nicméně původní konstruktor by se měl vždy rozhodně volat.

Příklad svázání:
**`SomeControl`** tedy:
;
public function __construct(IComponentContainer $parent = NULL, $name = NULL, $someParametr = NULL)
{
	parent::__construct($parent, $name);
	// ... nejaky kod metody
}
\---


a **`SomePresener`**
;
public function renderSomeview($someParametr)
{
	$this->someControl = new SomeControl($this, 'my-control-name', $someParametr);
	$this->template->someControl = $this->someControl;
	// ... nejaky kod metody
}
\---


.[see]
Viz také:
- [Fully qualified view | http://nette.org/cs/fully-qualified-view]
- [View vs. Scene | http://nette.org/cs/view-vs-scene]
- [Ajax & snippety | http://nette.org/cs/ajax-snippety]
- [Generování odkazů | http://nette.org/cs/generovani-odkazu]
- [Neplatné odkazy | http://nette.org/cs/neplatne-odkazy]





/--comment

Scéna (Scene)
--------------
- http://forum.nette.org/cs/viewtopic.php?pid=3828#p3828


Routování
---------
- http://forum.nette.org/cs/viewtopic.php?pid=3782#p3782
- http://forum.nette.org/cs/viewtopic.php?pid=3857#p3857  - viz inkludování rout dole
