Nette\Application\Presenter
****************************
Reaguje na události pocházející od uživatele a zajišťuje změny v modelu nebo v pohledu. .[perex]

/--comment
http://forum.nette.org/cs/806-presenter
http://forum.nette.org/cs/viewtopic.php?pid=3832#p3832
http://forum.nette.org/cs/826-backlink-mezi-presentery-a-view
http://forum.nette.org/cs/671-jak-na-odkaz-na-jiny-presenter
\--

Životní cyklus presenteru
===================
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=4020#p4020
\--

[* http://nette.org/media/lifecycle.gif >] *** *Životní cyklus presenteru* .<>

Životní cyklus presenteru je rozdělen do několika částí představovaných voláním volitelně existujících metod. Jde o `present{View}`, `prepare{Scene}`, `handle{Signal}` a `render{Scene}`. Každá metoda se hodí na něco jiného. Ty které mají společné znaky řadíme do společných fází životního cyklu.

Charakteristika fází:
--------------------
1. výkonná *(execution)*
2. změny vnitřních stavů *(state changing)*
3. vykreslovací *(rendering)*
4. ukončení činnosti

Následující obrázek ilustruje, jak jsou postupně vykonávány metody presenteru v jeho životním cyklu a do jaké fáze tyto metody začleňujeme.
- **bílé** - metody společné pro všechny pohledy
- **žluté** - metody pro konkrétní pohled (nebo scénu)
- **modré** - metoda, která má na starosti zpracování konkrétního signálu


Popis metod jednotlivých metod
=======================

Fáze výkonná *(execution)*
-------------
1) **startup** je vyvolána na začátku životního cyklu presenteru. Může obsahovat například zajištění připojení k databázi.
2) **present{View}**  by měla obsahovat vykonání operací, po kterých může následovat přesměrování. Zde probíhá například automatické přesměrování na jinou jazykovou verzi (např. podle detekce z prohlížeče). Také zde může být logika rozhodování pohledu pro členění na jednotlivé [scény | http://nette.org/cs/view-vs-scene].

- **Klíčový moment pro redirect:** je zde prostor pro manipulaci s modelem s možností následného přesměrování, tzn. v tomto stavu se zohlední při redirectu i hodnoty persistentních parametrů. <br /> Př.: pokud zde nastavím persistentnímu parametru `$lang` hodnotu `'cs'`, pak se i tato hodnota zohlední v novém požadavku po přesměrování.


Fáze změn vnitřních stavů *(state changing)*
-------------------------
3) **beforePrepare** by měla obsahovat registrace společných komponent, které chceme používat ve více metodách (např: stránkování, řazení, formulář, ...).
4) **prepare{Scene}** má na starosti logiku drobnějšího členění pro konkrétní situace ([scény | http://nette.org/cs/view-vs-scene]). Pokud není třeba rozlišovat více scén, tak obecně platí: **`view = scene`**. Z názvu scény si presenter určuje i soubory s šablonou.
5) **handle{Signal}** : zpracování [signálů | #signaly] neboli subrequestů. Jako dělané pro zpracování AJAXových požadavků.

- **Mezikrok - uložení vnitřních stavů**: dříve než se přejde k další fázi *(rendering)*, uloží se stav všech vnitřních stavů a persistentních proměnných. Zde máme právě **poslední možnost** změnit hodnoty persistentních parametrů před vykreslováním, protože dále už by změny neměly vliv při vytváření odkazů.


Fáze vykreslovací *(rendering)*
-----------------
6) **beforeRender** může obsahovat například společné nastavení filtrů pro všechny vykreslovače a nastavení společných proměnných pro šablony všech vykreslovačů.
7) **render{Scene}** má na starosti vykreslení a věci s tím spojené (tvorba odkazů v šablonách, přiřzení proměnných do konkrétních šablon, ...).
8) **afterRender** je společná pro všechny scény, která je zavolána po korektním vykreslení presenteru.
9) **shutdown** je vyvolána při korektním ukončení životního cyklu presenteru. Zde můžeme ukončit databázové připojení, kešování a podobně.

Presenter má během svého životního cyklu možnost kdykoliv ukončit svou činnost, pokud je s prací hotový (`$presenter->terminate()`). To může udělat i během "společných" metod `startup()`, `beforePrepare()`, `beforeRender()`, případně zde může view měnit `changeView(...)`.

U složitějších aplikací se nevyhnete stromovým strukturám a hierarchii presenterů. To jak je správně navrhovat je řečeno v článku [Návrh struktury presenters/views | http://phpfashion.com/navrh-struktury-presenters-views]. V takovýchto strukturách nelze abstraktní presenter kvůli bezpečnosti vyvolat URL požadavkem.

*TIP:* V presenteru, pokud někde dochází k zásadní chybě, tak je vhodné vyhazovat výjimky a další zpracování přenechat *exception handleru*.





Signál aneb subrequest .[#subrequest]
===========
Signál (aneb subrequest) je komunikace se serverem pod prahem normálního view, tedy akce, které se dějí, aniž by se změnilo view. View může měnit pouze presenter, proto komponenty pracují vždy pod tímto prahem, tudíž `$component->link()` vede na signál, `$presenter->link()` obvykle na view (nebo signál, je-li označen vykřičníkem). Pro úplnost, i komponenta může volat `$this->presenter->link('view')`.

Signál způsobí znovunačtení stránky úplně stejně jako při původním požadavku (kromě případu, kdy je volán AJAXem) a vyvolá metodu `signalReceived($signal)`, jejíž výchozí implementace ve třídě *PresenterComponent* se pokusí zavolat metodu složenou ze slov `handle + $signal`.

Signál se vždy volá na aktuálním presenteru a view, tudíž není možné jej směřovat jinam.

/--comment
http://forum.nette.org/cs/893-obsluzne-handlery-zo-sticky
\--
Metoda `isSignalReceiver()` ověří, zda je komponenta (první argument) příjemcem signálu (druhý argument). Druhý argument můžeme vynechat – pak zjišťuje, jestli je komponenta příjemcem jakéhokoliv signálu. Experimentálně lze jako druhý parametr uvést `TRUE` a tím ověřit, jestli je příjemcem nejen uvedená komponenta, ale také kterýkoliv její potomek.

V kterékoliv fázi předcházející `handle{signal}` můžeme vykonat signál manuálně zavoláním metody `$this->processSignal()`.

**Příklad:**

/--php
if ($this->isSignalReceiver($this, 'paging') || $this->isSignalReceiver($this, 'sorting')) {
    $this->processSignal();
}
\--

Tím je signál provedený a už se nebude znovu volat.


Subrequest vs. request
----------------------
Rozdíly mezi signálem a požadavkem:
- subrequest přenáší všechny komponenty
- request přenáší označené (persistentní) komponenty


Šablony (Templates)
================
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=3156#p3156
\--
Presenter se pokusí vykreslit implicitní šablonu, pokud nebylo řečeno metodami [changeLayout() | api:Nette\Application\Presenter#methodchangeLayout] & [changeScene() | api:Nette\Application\Presenter#methodchangeScene] jinak. Jméno šablony odvodí od view.

Každý presenter může mít vlastní layout uložený v souboru:
- `/templates/Homepage/@layout.phtml`
- `/templates/Homepage.@layout.phtml`.
- nebo se použije společný layout uložený v `/templates/@layout.phtml`.

Změnit layout jde metodou `changeLayout()`, kde parameter `FALSE` layout zcela vypne, nebo lze předat název layoutu. Např. `changeLayout('extra')` bude místo souboru `...@layout.phtml` hledat `...@extra.phtml`.

Teprve když by soubor se šablonou neexistoval, vyhodí se výjimka `BadRequestException`.

Tohle chování má výhodu v tom, že pokud přidáváme nové view, stačí přidávat nové šablony do příslušné složky a není potřeba psát žádné (prázdné) metody. A naopak, view jsou na šablonách nezávislé, můžeme je zpracovat dřív, než na kreslení šablony dojde.


Persistentní parametry
=================
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=3886#p3886
http://forum.nette.org/cs/669-jak-na-persistenci

Perzistentní komponenty - http://forum.nette.org/cs/844-persistentni-komponenty-a-dalsi-novinky-v-revizi-71

pozor na kolize se zaplym eAcceleratorem!
\--

Persistentní parameter není potřeba uvádět při volání `link(...)`, neboť se předává automaticky. Ale uvést ho samozřejmě možné je a tak mu změnit hodnotu.

Podmínkou persistence je jeho deklarace jako public a uvedení řetězce `@persistent` v `phpDoc` syntaxi komentáře proměnné:

/--php
/** @persistent int */
public $page = 0;
\--

Persistence zohledňuje hierarchii tříd, tzn. že každý poděděnec má tytéž persistentní parametry jako rodič.
Komponenty jsou persistentní samy o sobě, tedy při subrequestu, při zavolání signálu.
Je-li persistentní parametr inicializován výchozí hodnotou, jako výše uvedený, pak nejsou tyto hodnoty předávány v URL. Pokud aplikace přijme request, kde je tato výchozí hodnota zadána, provádí se redirect (`index.php?page=0` -> `index.php`) z důvodu SEO optimalizace. Jinak by se nám stránka, která zobrazí stejné informace pod dvěmi tvary, zaindexovala dvakrát. Proto je vhodné parametry, které se přenášejí v URL (nejen persistentní, ale i ty, které přenášíme v metodách `prepare{Scene}` apod.), inicializovat výchozí hodnotou, stejně jako výchozí presentery a pohledy v routách. Nejsou-li parametry inicializovány, mají hodnotu `NULL`.

V query-stringu funguje i přetypování BOOL a FLOAT hodnot na INT:
- `TRUE` -> 1
- `FALSE` -> 0



Komponenty
=========
/--comment
http://forum.nette.org/cs/viewtopic.php?pid=3418#p3418
\--

Svázání komponenty s presenterem umožňuje:
- používat v komponentě persistentní parametry
- používat signály
- volat na komponentě funkce závislé na přítomnosti presenteru (`link`, `redirect`, `endSnippet`)

Pokud nic z toho nepotřebujeme (nebo nechceme), není potřeba komponentu s presenterem vázat (respektive není potřeba ani dědit z `PresenterCom­ponent` nebo `Control`). Nicméně původní konstruktor by se měl vždy rozhodně volat.

Příklad svázání:
**`SomeControl`** tedy:
;
public function __construct(IComponentContainer $parent = NULL, $name = NULL, $someParametr = NULL)
{
	parent::__construct($parent, $name);
	// ... nejaky kod metody
}
\---


a **`SomePresener`**
;
public function renderSomeview($someParametr)
{
	$this->someControl = new SomeControl($this, 'my-control-name', $someParametr);
	$this->template->someControl = $this->someControl;
	// ... nejaky kod metody
}
\---


.[see]
Viz také:
- [Model-View-Presenter]
- [Nette\Application\Presenter | api:Nette\Application\Presenter] API reference
- [Fully qualified view]
- [Generování odkazů] a [Neplatné odkazy]
- [Suggested directory structure]
- [Routování]
- [View vs. Scene]





/--comment

Scéna (Scene)
--------------
- http://forum.nette.org/cs/viewtopic.php?pid=3828#p3828


Routování
---------
- http://forum.nette.org/cs/viewtopic.php?pid=3782#p3782
- http://forum.nette.org/cs/viewtopic.php?pid=3857#p3857  - viz inkludování rout dole
