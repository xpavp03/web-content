Nette\Web\HttpRequest
***********************

Tato třída zapouzdřuje a zjednodušuje práci s některými [superglobálními proměnými | http://www.php.net/manual/en/language.variables.superglobals.php] (`$_GET`, `$_POST`, `$_COOKIE``, $_FILES`) a HTTP hlavičkami.


Použití
=====
Nejdříve si získáme/vytvoříme instanci třídy:

/--php
$httpRequest = Environment::getHttpRequest();

// pokud nepoužíváte třídu společně s Nette
$httpRequest = new HttpRequest;
\--

Metody
=====
- `getMethod()` zjistí jakou metodou se na stránky přistoupilo (`GET`, `POST`, `HEAD`, `PUT`, ...)
- `getQuery()` vrací podčást nebo celý query-string, který je naparsován do asociativního pole
- `getPost()` vrací podčást nebo celý obsah pole `$_POST`
- `getFiles()` celý obsah pole uploadovaných souborů `$_FILE`, `getFile()` vrací jeho podčásti
- `getCookies()` vrací celý obsah pole `$_COOKIE`, `getCookie()` vrací jeho podčásti
- `getHeaders()` vrací všechny HTTP hlavičky poslány prohlížečem, `getHeader()` vrací jednotlivé hlavičky
- `getReferer()` - alias pro `getHeader('referer')` vracející adresu jako objekt `Nette\Web\Uri`
- `getRemoteAddress()`
- `isSecured()` zjistí jedná-li se o zabezpečenou https komunikaci
- `isAjax()` zjistí jedná-li se o AJAXový požadavek


Metoda `getRemoteAddress()` slouží k získání IP adresy serveru nebo jejího DNS překladu.
/--php
echo $httpRequest->getRemoteAddress();
// 127.0.0.1

echo $httpRequest->getRemoteAddress(TRUE);
// localhost
\--

A nakonec velmi užitečná metoda `detectLanguage()`, která získá preferovaný jazyk prohlížeče podle priority kterou máte nastavenu, případně, pokud jí předáte pole jazyků, které podporuje vaše aplikace, vrátí z nich ten, který by viděl návštěvníkův prohlížeč nejradši.
 Nejsou to žádná kouzla, jen se využívá hlavičky `accept-language`.
/--php
// prohlížeč odesílá hlavičku: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

// jazyky podporované aplikací
$langs = array('hu', 'pl', 'en');
echo $httpRequest->detectLanguage($langs); // en
\--


Nette\Web\Uri
============

Třída `Uri` je obecným zapouždřením jakéhokoliv URL (tedy zatím jen URL) a poskytuje nám jednoduchou a elegantní práci s URI((Uniform Resource Identifier / Jednotný zdrojový identifikátor)) adresami podle doporučení pro označování syntaxe adres `RFC 3986`. Základem třídy je funkce [`parse_url()` | http://www.php.net/manual/en/function.parse-url.php].

Použití je velmi intuitivní:


/--php
$uri = new Uri('http://nette.org/cs/dokumentace?action=history#footer');
// vstupem musí být absolutní adresa

echo $uri->absoluteUri;
// altenativně: echo (string) $uri;
// output: http://nette.org/cs/dokumentace?action=history#footer

echo $uri->scheme; // http
echo $uri->authority; // nette.org
echo $uri->getHostUri(); // http://nette.org

echo $uri->path; // /cs/dokumentace
echo $uri->query; // action=history
echo $uri->fragment; // footer
\--

Jsou podporovány i jiná schémata než `http`, např. `file`, `ftp` nebo `https`.


Propojení třídy *Uri* s třídou *HttpRequest*
=======================

`Nette\Web\HttpRequest` obsahuje dva (vlastně tři) URI objekty:
- `HttpRequest::getUri()` – k kanonické podobně
- `HttpRequest::getOriginalUri()` – v surové podobě
- a ještě `HttpRequest::getReferer()`


Kompletní cestu vrací metoda `Uri::getAbsoluteUri()`, takže lze použít
/--php
$httpRequest->getAbsoluteUri()->baseUri;

// nebo v prostředí Nette
Environment::getHttpRequest()->uri->absoluteUri;

// apod:
$httpRequest->getUri()->basePath;
$httpRequest->getUri()->relativeUri;
$httpRequest->getUri()->absoluteUri;
\--
