Slovníček pojmů - Rychlý přehled
**************
Component, control, controller, snippet, presenter, modul a model. Jaký je mezi nimi rozdíl? Jaký význam mají v kontextu Nette Framework? .[perex]

Toto je pouze rychlý přehled pojmů, kompletní [slovníček pojmů | slovnik] je k dispozici také. .[tip]

/--div .[note]
Todo:
* Přidat jmenné prostory
* Dopsat, co chybí
* Sjednotit styl (velká/malá písmena)
* Zkontrolovat, zda Inza neřekl blbosti, opravit je...
* Udělat obsah do dvou sloupců
* Poupravit CSS, takhle se v tom člověk nevyzná...
* Pojmy definovat vždy v čísle jednotném
* Sjednotit formátování - vše psát na začátku malým nebo velkým písmenem, ne obojím...
\--

A
----
.[#action]
.[#akce]
action:
	- (akce) - zastupuje požadavek uživatele. Je součástí presenteru (jeden presenter může mít více akcí).
.[#AJAX]
AJAX:
	- (<span lang="en">Assynchronous JavaScript And XML</span>) - technologie výměny informací mezi klientem a serverem přes HTTP protokol bez nutnosti znovunačtení celé stránky při každém požadavku. AJAX prošel několika verzemi a ustálil se na spolupráci s JavaScriptovým objektem `XMLHttpRequest`. Posílaná data jsou ve formátu XML.

C
----
.[#cesta]
cesta:
	- viz [route | #route].
.[#component]
component:
	- (komponenta)
- znovupoužitelná součást aplikace.
- instance třídy [Nette\Component]. (viz též [slovnik#toc-nette-component])
.[#control]
control:
	- Vykreslitelná [komponenta | #component]. Třída, která je potomkem třídy [Nette\Application\Control]. (viz též [slovnik#toc-nette-application-control])
.[#controller]
controller:
	- Písmenko **C** z [MV**C** modelu | #MVC model]; v Nette Framework je nahrazen [presenterem | #presenter].
.[#CurlyBrackets]
CurlyBrackets:
	- (složené závorky) speciální značky uvnitř [šablon | #template], zapisované pomocí složených závorek (odtud název), které umí zpracovat [filtry | #filter].

F
----
.[#filter]
.[#filtr]
filter:
	- (filtr) - pomůcka, která má na starosti předzpracování šablony (de facto je její preprocessor). Předzpracování podporuje syntax tzv. [CurlyBracktes | #CurlyBrackets]. (viz též: [Template Filters])
.[#framework]
framework:
	- soubor knihoven, návrhových vzorů, [API | #API], atd., podporující vývoji softwarových projektů. Skládá se z tzv. //hot spots// a //frozen spots// (doslova "horkých" a "zmražených míst" - //frozen spots// definují základní komponenty a strukturu frameworku a zůstávají stejná - "zmražená"; hot spots jsou komponenty definované pro funkcionalitu konkrétního vyvíjeného projektu ve frameworku a tedy jsou s každým projektem jiná.) Viz též [Co je Nette Framework].

H
----
.[#helper]
helper:
	- (pomocník) - pojmenovaná funkce, kterou lze zaregistrovat do instance [šablon | #template] a následně ji používat. Šablony implicitně mají několik [standardních helperů | Template helpers].

I
----
.[#invalidace]
invalidace:
	- proces, kterým je [snippetu | #snippet] řečeno, že změnil svůj obsah, a je potřeba, aby se překreslil a tím tuto změnu reflektoval.

J
----
.[#jmenný prostor]
jmenný prostor:
	- viz [namespace | #namespace].

K
----
.[#komponenta]
komponenta:
	- viz [component | #component].

L
----
.[#loader]
loader:
	- instance některé z tříd [Nette\Loaders]. Využívá metody [__autoload | http://www.php.net/__autoload] a vhodné konvence názvu tříd a souborů, ve kterých jsou umístěny.

M
----
.[#model]
model:
	- Písmenko **M** z [* *M**VC modelu | #MVC model]; aplikační (bussiness) logika aplikace, zprostředkuje přístup k práci s daty.  (viz též [slovnik#toc-model-a-modul])
.[#Model-View-Controller]
Model-View-Controller:
	- Architektura, která rozděluje aplikaci do tří vrstev:
* [(datový) model | #model], který zajišťuje přístup k datům a manipulaci s nimi,
* [view | #view] (pohled), který je získaná data zobrazí ve vhodné podobě, a
* [controller | #controller] (řadič řídicí logiky), který zjišťuje požadavky uživatele a řízením ostatních dvou modulů zajišťuje, aby uživatel dostal, co požaduje.
.[#model-view-presenter]
Model-View-Presenter:
	- Architektura, vycházející z [Model-View-Controller | #Model-View-Controller], kterou využívá Nette. (viz [Model-View-Presenter (MVP) | model-view-presenter])
.[#modul]
modul:
	- Skupina Presenterů, Modelů a Pohledů, které spolu mají souvislost a nacházejí se v jednom stejném adresáři. (viz též [slovnik#toc-model-a-modul])
.[#MVC model]
MVC model:
	- viz [Model-View-Controller | #Model-View-Controller].

N
----
.[#namespace]
namespace:
	- (jmenný prostor) - prvek jazyka PHP (verze 5.3 a vyšší) a jiných programovacích/skriptovacích jazyků, umožňující zapouzdření a používání tříd (i jiných prvků jazyka), které jsou v různých knihovnách nazvány stejně, aniž by došlo ke kolizi jmen (případu, kdy by interpret jazyku nevěděl, prvek z jaké knihovny použít). ([dokumentace pro PHP | http://cz2.php.net/manual/en/language.namespaces.rationale.php])

O
----
.[#object]
.[#objekt]
object:
	- (objekt):
- základní prvek objektově orientovaného programování,
- instance třídy [Nette\Object] (viz též [slovnik#toc-nette-object])

P
----
.[#pohled]
pohled:
	- viz [view | #view].
.[#presenter]
presenter:
	- Ekvivalent [controlleru | #controller] z MV**C** modelu, přijímá požadavky od uživatele a realizuje je vykonáním cílové action a zobrazením view. (viz též [slovnik#toc-nette-application-presenter])

R
----
.[#route]
route:
	- (cesta, routa) - objekt třídy Route; analyzuje danou URL adresu a vytvoří z ní interní požadavek, popřípadě i naopak - viz [Nette\Application\Route].
.[#router]
router:
	- (směrovač) - Správce rout, zodpovědný za směrování rout na požadavky.

S
----
.[#složené závorky]
složené závorky:
	- viz [CurlyBrackets | #CurlyBrackets].
.[#směrovač]
směrovač:
	- viz [router | #router].
.[#snippet]
snippet:
	- (ústřižek) - označená oblast stránky, kterou lze překreslit pomocí [AJAXu | #ajax].
.[#šablona]
šablona:
	- viz [template | #template].

T
----
.[#template]
template:
	- ([šablona | nette-templates])
- soubor s příponou `.phtml` pro definici layoutu výsledné stránky s vloženými PHP, CurlyBrackets, atd. (více viz stránka [šablony])
- objekt třídy [Template | Nette]\Templates.

U
----
.[#ústřižek]
ústřižek:
	- viz [snippet | #snippet].

V
----
.[#view]
view:
	- (pohled) - písmenko **V** z [M**V**C modelu | #MVC model]; převádí data reprezentovaná modelem do podoby vhodné k interaktivní prezentaci uživateli.
.[#vykreslitelna komponenta]
vykreslitelná komponenta:
	- viz [control | #control].
